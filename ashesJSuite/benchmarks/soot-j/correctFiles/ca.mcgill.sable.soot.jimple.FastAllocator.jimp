class ca.mcgill.sable.soot.jimple.FastAllocator extends java.lang.Object
{

    private static void packLocals(ca.mcgill.sable.soot.jimple.StmtBody)
    {
        ca.mcgill.sable.soot.jimple.StmtBody r0;
        ca.mcgill.sable.soot.jimple.FastAllocator r1;

        r0 := @parameter0;
        r1 = new ca.mcgill.sable.soot.jimple.FastAllocator;
        specialinvoke r1.<init>(r0);
        return;
    }

    public void <init>(ca.mcgill.sable.soot.jimple.StmtBody)
    {
        ca.mcgill.sable.soot.jimple.FastAllocator r0;
        ca.mcgill.sable.soot.jimple.StmtBody r1;
        java.lang.StringBuffer r2, r9, r10, r25, r28, r29, r31, r32, r37, r40, r41, r42, r59, r62, r63, r64;
        ca.mcgill.sable.soot.jimple.LiveLocals r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38;
        ca.mcgill.sable.soot.jimple.Local r4, r19, r52, r54, r67, r72, r73, r75, r84, r88, r90, r96, r106, r109;
        ca.mcgill.sable.soot.jimple.StmtList r5;
        java.io.PrintStream r6, r24, r36, r58;
        ca.mcgill.sable.soot.SootMethod r7, r26, r38, r60;
        java.lang.String r8, r11, r27, r30, r33, r39, r43, r61, r65, r91, r92;
        ca.mcgill.sable.soot.jimple.CompleteStmtGraph r12;
        ca.mcgill.sable.soot.jimple.SimpleLiveLocals r13;
        ca.mcgill.sable.soot.jimple.SparseLiveLocals r14;
        ca.mcgill.sable.util.List r15, r80, r82, r94, r100;
        ca.mcgill.sable.util.Iterator r16, r21, r45, r69, r76, r81, r86, r93, r97, r101;
        ca.mcgill.sable.util.ArraySet r17;
        java.lang.Object r18, r22, r46, r55, r66, r70, r74, r77, r78, r83, r87, r89, r95, r98, r102, r108;
        ca.mcgill.sable.soot.Type r20, r23, r53, r85, r107;
        ca.mcgill.sable.util.HashMap r34;
        ca.mcgill.sable.util.HashSet r35, r68, r79;
        ca.mcgill.sable.soot.jimple.FastAllocator$InterferenceGraph r44;
        ca.mcgill.sable.soot.jimple.Stmt r47, r99;
        ca.mcgill.sable.soot.jimple.IdentityStmt r48, r50;
        ca.mcgill.sable.soot.jimple.Value r49, r51, r104, r105;
        ca.mcgill.sable.util.LinkedList r56;
        ca.mcgill.sable.util.Set r57;
        ca.mcgill.sable.soot.jimple.Local[] r71;
        ca.mcgill.sable.soot.jimple.ValueBox r103;

        r0 := @this;
        r1 := @parameter0;
        specialinvoke r0.<init>();
        r5 = r1.getStmtList();
        i1 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i1 == 0 goto label0;

        r6 = java.lang.System.out;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("[");
        r7 = r1.getMethod();
        r8 = r7.getName();
        r9 = r2.append(r8);
        r10 = r9.append("] Packing locals...");
        r11 = r10.toString();
        r6.println(r11);

     label0:
        r12 = new ca.mcgill.sable.soot.jimple.CompleteStmtGraph;
        specialinvoke r12.<init>(r5);
        i2 = ca.mcgill.sable.soot.jimple.Main.usePackedLive;
        if i2 == 0 goto label1;

        r13 = new ca.mcgill.sable.soot.jimple.SimpleLiveLocals;
        specialinvoke r13.<init>(r12);
        r3 = r13;
        goto label2;

     label1:
        r14 = new ca.mcgill.sable.soot.jimple.SparseLiveLocals;
        specialinvoke r14.<init>(r12);
        r3 = r14;

     label2:
        r15 = r1.getLocals();
        r16 = r15.iterator();
        r17 = new ca.mcgill.sable.util.ArraySet;
        specialinvoke r17.<init>();
        goto label4;

     label3:
        r18 = r16.next();
        r19 = (ca.mcgill.sable.soot.jimple.Local) r18;
        r20 = r19.getType();
        i3 = r17.add(r20);

     label4:
        i4 = r16.hasNext();
        if i4 != 0 goto label3;

        r21 = r17.iterator();
        goto label30;

     label5:
        r22 = r21.next();
        r23 = (ca.mcgill.sable.soot.Type) r22;
        i5 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i5 == 0 goto label6;

        r24 = java.lang.System.out;
        r25 = new java.lang.StringBuffer;
        specialinvoke r25.<init>("[");
        r26 = r1.getMethod();
        r27 = r26.getName();
        r28 = r25.append(r27);
        r29 = r28.append("](Packing locals)    Packing type ");
        r30 = r23.toString();
        r31 = r29.append(r30);
        r32 = r31.append("...");
        r33 = r32.toString();
        r24.println(r33);

     label6:
        r34 = new ca.mcgill.sable.util.HashMap;
        i6 = r1.getLocalCount();
        i7 = i6 * 2;
        i8 = i7 + 1;
        specialinvoke r34.<init>(i8, 0.7F);
        r35 = new ca.mcgill.sable.util.HashSet;
        specialinvoke r35.<init>();
        i9 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i9 == 0 goto label7;

        r36 = java.lang.System.out;
        r37 = new java.lang.StringBuffer;
        specialinvoke r37.<init>("[");
        r38 = r1.getMethod();
        r39 = r38.getName();
        r40 = r37.append(r39);
        r41 = r40.append("](Packing locals)    ");
        r42 = r41.append("Building interference graph...");
        r43 = r42.toString();
        r36.println(r43);

     label7:
        r44 = new ca.mcgill.sable.soot.jimple.FastAllocator$InterferenceGraph;
        specialinvoke r44.<init>(r0, r1, r23, r3);
        r45 = r5.iterator();
        goto label9;

     label8:
        r46 = r45.next();
        r47 = (ca.mcgill.sable.soot.jimple.Stmt) r46;
        i10 = r47 instanceof ca.mcgill.sable.soot.jimple.IdentityStmt;
        if i10 == 0 goto label10;

        r48 = (ca.mcgill.sable.soot.jimple.IdentityStmt) r47;
        r49 = r48.getLeftOp();
        i11 = r49 instanceof ca.mcgill.sable.soot.jimple.Local;
        if i11 == 0 goto label10;

        r50 = (ca.mcgill.sable.soot.jimple.IdentityStmt) r47;
        r51 = r50.getLeftOp();
        r52 = (ca.mcgill.sable.soot.jimple.Local) r51;
        r53 = r52.getType();
        i12 = r53.equals(r23);
        if i12 == 0 goto label9;

        r54 = new ca.mcgill.sable.soot.jimple.Local;
        specialinvoke r54.<init>("", r23);
        r55 = r34.put(r52, r54);
        i13 = r35.add(r54);
        goto label9;

     label9:
        i14 = r45.hasNext();
        if i14 != 0 goto label8;

     label10:
        r56 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r56.<init>();
        r57 = r44.getLocals();
        i15 = r56.addAll(r57);
        i16 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i16 == 0 goto label19;

        r58 = java.lang.System.out;
        r59 = new java.lang.StringBuffer;
        specialinvoke r59.<init>("[");
        r60 = r1.getMethod();
        r61 = r60.getName();
        r62 = r59.append(r61);
        r63 = r62.append("](Packing locals)    ");
        r64 = r63.append("Coloring each local...");
        r65 = r64.toString();
        r58.println(r65);
        goto label19;

     label11:
        r66 = r56.removeFirst();
        r67 = (ca.mcgill.sable.soot.jimple.Local) r66;
        i17 = r34.containsKey(r67);
        if i17 != 0 goto label19;

        r68 = new ca.mcgill.sable.util.HashSet;
        specialinvoke r68.<init>();
        r69 = r35.iterator();
        goto label13;

     label12:
        r70 = r69.next();
        i18 = r68.add(r70);

     label13:
        i19 = r69.hasNext();
        if i19 != 0 goto label12;

        r71 = r44.getInterferencesOf(r67);
        i0 = 0;
        goto label16;

     label14:
        r72 = r71[i0];
        i20 = r34.containsKey(r72);
        if i20 == 0 goto label15;

        r73 = r71[i0];
        r74 = r34.get(r73);
        i21 = r68.remove(r74);

     label15:
        i0 = i0 + 1;

     label16:
        i22 = r71.length;
        if i0 < i22 goto label14;

        i23 = r68.isEmpty();
        if i23 == 0 goto label17;

        r75 = new ca.mcgill.sable.soot.jimple.Local;
        specialinvoke r75.<init>("", r23);
        r4 = r75;
        i24 = r35.add(r75);
        goto label18;

     label17:
        r76 = r68.iterator();
        r77 = r76.next();
        r4 = (ca.mcgill.sable.soot.jimple.Local) r77;

     label18:
        r78 = r34.put(r67, r4);

     label19:
        i25 = r56.isEmpty();
        if i25 == 0 goto label11;

        r79 = new ca.mcgill.sable.util.HashSet;
        specialinvoke r79.<init>();
        r80 = r1.getLocals();
        r81 = r80.iterator();
        r82 = r1.getLocals();
        goto label21;

     label20:
        r83 = r81.next();
        r84 = (ca.mcgill.sable.soot.jimple.Local) r83;
        r85 = r84.getType();
        i26 = r85.equals(r23);
        if i26 == 0 goto label21;

        i27 = r82.remove(r84);
        i28 = r79.add(r84);

     label21:
        i29 = r81.hasNext();
        if i29 != 0 goto label20;

        r86 = r79.iterator();
        goto label23;

     label22:
        r87 = r86.next();
        r88 = (ca.mcgill.sable.soot.jimple.Local) r87;
        r89 = r34.get(r88);
        r90 = (ca.mcgill.sable.soot.jimple.Local) r89;
        r91 = r90.getName();
        i30 = r91.equals("");
        if i30 == 0 goto label23;

        r92 = r88.getName();
        r90.setName(r92);

     label23:
        i31 = r86.hasNext();
        if i31 != 0 goto label22;

        r93 = r35.iterator();
        r94 = r1.getLocals();
        goto label25;

     label24:
        r95 = r93.next();
        r96 = (ca.mcgill.sable.soot.jimple.Local) r95;
        i32 = r94.add(r96);

     label25:
        i33 = r93.hasNext();
        if i33 != 0 goto label24;

        r97 = r5.iterator();
        goto label29;

     label26:
        r98 = r97.next();
        r99 = (ca.mcgill.sable.soot.jimple.Stmt) r98;
        r100 = r99.getUseAndDefBoxes();
        r101 = r100.iterator();
        goto label28;

     label27:
        r102 = r101.next();
        r103 = (ca.mcgill.sable.soot.jimple.ValueBox) r102;
        r104 = r103.getValue();
        i34 = r104 instanceof ca.mcgill.sable.soot.jimple.Local;
        if i34 == 0 goto label28;

        r105 = r103.getValue();
        r106 = (ca.mcgill.sable.soot.jimple.Local) r105;
        r107 = r106.getType();
        i35 = r107.equals(r23);
        if i35 == 0 goto label28;

        r108 = r34.get(r106);
        r109 = (ca.mcgill.sable.soot.jimple.Local) r108;
        r103.setValue(r109);

     label28:
        i36 = r101.hasNext();
        if i36 != 0 goto label27;

     label29:
        i37 = r97.hasNext();
        if i37 != 0 goto label26;

     label30:
        i38 = r21.hasNext();
        if i38 != 0 goto label5;

        return;
    }
}
