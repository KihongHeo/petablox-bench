public class ca.mcgill.sable.soot.jimple.SimpleLocalCopies extends java.lang.Object implements ca.mcgill.sable.soot.jimple.LocalCopies
{
    ca.mcgill.sable.util.Map stmtToCopies;

    public void <init>(ca.mcgill.sable.soot.jimple.CompleteStmtGraph)
    {
        ca.mcgill.sable.soot.jimple.SimpleLocalCopies r0;
        ca.mcgill.sable.soot.jimple.CompleteStmtGraph r1;
        java.lang.StringBuffer r2, r8, r9;
        int i0, i1, i2, i3, i4, i5, i6;
        ca.mcgill.sable.soot.Timer r3, r22;
        java.io.PrintStream r4;
        ca.mcgill.sable.soot.jimple.StmtBody r5;
        ca.mcgill.sable.soot.SootMethod r6;
        java.lang.String r7, r10;
        ca.mcgill.sable.soot.jimple.CopiesFlowAnalysis r11;
        ca.mcgill.sable.util.HashMap r12;
        ca.mcgill.sable.util.Iterator r13;
        java.lang.Object r14, r16, r21;
        ca.mcgill.sable.soot.jimple.Stmt r15;
        ca.mcgill.sable.soot.jimple.FlowSet r17;
        ca.mcgill.sable.util.Map r18;
        ca.mcgill.sable.util.List r19, r20;

        r0 := @this;
        r1 := @parameter0;
        specialinvoke r0.<init>();
        i0 = ca.mcgill.sable.soot.jimple.Main.isProfilingOptimization;
        if i0 == 0 goto label0;

        r3 = ca.mcgill.sable.soot.jimple.Main.copiesTimer;
        r3.start();

     label0:
        i1 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i1 == 0 goto label1;

        r4 = java.lang.System.out;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("[");
        r5 = r1.getBody();
        r6 = r5.getMethod();
        r7 = r6.getName();
        r8 = r2.append(r7);
        r9 = r8.append("]     Constructing SimpleLocalCopies...");
        r10 = r9.toString();
        r4.println(r10);

     label1:
        r11 = new ca.mcgill.sable.soot.jimple.CopiesFlowAnalysis;
        specialinvoke r11.<init>(r1);
        r12 = new ca.mcgill.sable.util.HashMap;
        i2 = r1.size();
        i3 = i2 * 2;
        i4 = i3 + 1;
        specialinvoke r12.<init>(i4, 0.7F);
        r0.stmtToCopies = r12;
        r13 = r1.iterator();
        goto label3;

     label2:
        r14 = r13.next();
        r15 = (ca.mcgill.sable.soot.jimple.Stmt) r14;
        r16 = r11.getFlowBeforeStmt(r15);
        r17 = (ca.mcgill.sable.soot.jimple.FlowSet) r16;
        r18 = r0.stmtToCopies;
        r19 = r17.toList();
        r20 = ca.mcgill.sable.util.Collections.unmodifiableList(r19);
        r21 = r18.put(r15, r20);

     label3:
        i5 = r13.hasNext();
        if i5 != 0 goto label2;

        i6 = ca.mcgill.sable.soot.jimple.Main.isProfilingOptimization;
        if i6 == 0 goto label4;

        r22 = ca.mcgill.sable.soot.jimple.Main.copiesTimer;
        r22.end();

     label4:
        return;
    }

    public boolean isLocalCopyOfBefore(ca.mcgill.sable.soot.jimple.Local, ca.mcgill.sable.soot.jimple.Local, ca.mcgill.sable.soot.jimple.Stmt)
    {
        ca.mcgill.sable.soot.jimple.SimpleLocalCopies r0;
        ca.mcgill.sable.soot.jimple.Local r1, r2;
        ca.mcgill.sable.soot.jimple.Stmt r3;
        ca.mcgill.sable.util.Map r4;
        java.lang.Object r5;
        ca.mcgill.sable.util.List r6;
        ca.mcgill.sable.soot.jimple.LocalCopy r7;
        int i0;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r3 := @parameter2;
        r4 = r0.stmtToCopies;
        r5 = r4.get(r3);
        r6 = (ca.mcgill.sable.util.List) r5;
        r7 = new ca.mcgill.sable.soot.jimple.LocalCopy;
        specialinvoke r7.<init>(r1, r2);
        i0 = r6.contains(r7);
        return i0;
    }

    public ca.mcgill.sable.util.List getCopiesBefore(ca.mcgill.sable.soot.jimple.Stmt)
    {
        ca.mcgill.sable.soot.jimple.SimpleLocalCopies r0;
        ca.mcgill.sable.soot.jimple.Stmt r1;
        ca.mcgill.sable.util.Map r2;
        java.lang.Object r3;
        ca.mcgill.sable.util.List r4;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.stmtToCopies;
        r3 = r2.get(r1);
        r4 = (ca.mcgill.sable.util.List) r3;
        return r4;
    }
}
