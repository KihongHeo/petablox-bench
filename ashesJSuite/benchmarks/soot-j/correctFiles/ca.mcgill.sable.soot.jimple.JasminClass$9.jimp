final class ca.mcgill.sable.soot.jimple.JasminClass$9 extends ca.mcgill.sable.soot.TypeSwitch
{
    private final ca.mcgill.sable.soot.jimple.JasminClass this$0;
    private final java.lang.String val$label;

    public void caseIntType(ca.mcgill.sable.soot.IntType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.IntType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_icmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void caseBooleanType(ca.mcgill.sable.soot.BooleanType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.BooleanType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_icmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void caseShortType(ca.mcgill.sable.soot.ShortType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.ShortType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_icmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void caseCharType(ca.mcgill.sable.soot.CharType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.CharType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_icmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void caseByteType(ca.mcgill.sable.soot.ByteType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.ByteType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_icmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void caseDoubleType(ca.mcgill.sable.soot.DoubleType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.DoubleType r1;
        ca.mcgill.sable.soot.jimple.JasminClass r2, r3;
        java.lang.StringBuffer r4, r6;
        java.lang.String r5, r7;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.this$0;
        r2.emit("dcmpg", -3);
        r3 = r0.this$0;
        r4 = new java.lang.StringBuffer;
        specialinvoke r4.<init>("ifne ");
        r5 = r0.val$label;
        r6 = r4.append(r5);
        r7 = r6.toString();
        r3.emit(r7, -1);
        return;
    }

    public void caseLongType(ca.mcgill.sable.soot.LongType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.LongType r1;
        ca.mcgill.sable.soot.jimple.JasminClass r2, r3;
        java.lang.StringBuffer r4, r6;
        java.lang.String r5, r7;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.this$0;
        r2.emit("lcmp", -3);
        r3 = r0.this$0;
        r4 = new java.lang.StringBuffer;
        specialinvoke r4.<init>("ifne ");
        r5 = r0.val$label;
        r6 = r4.append(r5);
        r7 = r6.toString();
        r3.emit(r7, -1);
        return;
    }

    public void caseFloatType(ca.mcgill.sable.soot.FloatType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.FloatType r1;
        ca.mcgill.sable.soot.jimple.JasminClass r2, r3;
        java.lang.StringBuffer r4, r6;
        java.lang.String r5, r7;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.this$0;
        r2.emit("fcmpg", -1);
        r3 = r0.this$0;
        r4 = new java.lang.StringBuffer;
        specialinvoke r4.<init>("ifne ");
        r5 = r0.val$label;
        r6 = r4.append(r5);
        r7 = r6.toString();
        r3.emit(r7, -1);
        return;
    }

    public void caseArrayType(ca.mcgill.sable.soot.ArrayType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.ArrayType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_acmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void caseRefType(ca.mcgill.sable.soot.RefType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.RefType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_acmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void caseNullType(ca.mcgill.sable.soot.NullType)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.NullType r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.soot.jimple.JasminClass r3;
        java.lang.String r4, r6;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.this$0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("if_acmpne ");
        r4 = r0.val$label;
        r5 = r2.append(r4);
        r6 = r5.toString();
        r3.emit(r6, -2);
        return;
    }

    public void defaultCase(ca.mcgill.sable.soot.Type)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        ca.mcgill.sable.soot.Type r1;
        java.lang.RuntimeException r2;
        java.lang.StringBuffer r3, r4;
        java.lang.String r5;

        r0 := @this;
        r1 := @parameter0;
        r2 = new java.lang.RuntimeException;
        r3 = new java.lang.StringBuffer;
        specialinvoke r3.<init>("invalid type for NeExpr: ");
        r4 = r3.append(r1);
        r5 = r4.toString();
        specialinvoke r2.<init>(r5);
        throw r2;
    }

    void <init>(java.lang.String, ca.mcgill.sable.soot.jimple.JasminClass)
    {
        ca.mcgill.sable.soot.jimple.JasminClass$9 r0;
        java.lang.String r1;
        ca.mcgill.sable.soot.jimple.JasminClass r2;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        specialinvoke r0.<init>();
        r0.val$label = r1;
        r0.this$0 = r2;
        return;
    }
}
