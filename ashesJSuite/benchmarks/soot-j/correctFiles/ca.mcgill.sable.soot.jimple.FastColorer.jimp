public class ca.mcgill.sable.soot.jimple.FastColorer extends java.lang.Object
{

    public static void assignColorsToLocals(ca.mcgill.sable.soot.jimple.StmtBody, ca.mcgill.sable.util.Map, ca.mcgill.sable.util.Map, ca.mcgill.sable.util.Map)
    {
        ca.mcgill.sable.soot.jimple.StmtBody r0;
        ca.mcgill.sable.util.Map r1, r2, r3;
        ca.mcgill.sable.soot.jimple.FastColorer r4;

        r0 := @parameter0;
        r1 := @parameter1;
        r2 := @parameter2;
        r3 := @parameter3;
        r4 = new ca.mcgill.sable.soot.jimple.FastColorer;
        specialinvoke r4.<init>(r0, r1, r2, r3);
        return;
    }

    private void <init>(ca.mcgill.sable.soot.jimple.StmtBody, ca.mcgill.sable.util.Map, ca.mcgill.sable.util.Map, ca.mcgill.sable.util.Map)
    {
        ca.mcgill.sable.soot.jimple.FastColorer r0;
        ca.mcgill.sable.soot.jimple.StmtBody r1;
        ca.mcgill.sable.util.Map r2, r3, r4;
        ca.mcgill.sable.soot.jimple.LiveLocals r5;
        int[] r6;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        ca.mcgill.sable.soot.jimple.StmtList r7;
        ca.mcgill.sable.soot.jimple.CompleteStmtGraph r8;
        ca.mcgill.sable.soot.jimple.SimpleLiveLocals r9;
        ca.mcgill.sable.soot.jimple.SparseLiveLocals r10;
        ca.mcgill.sable.soot.jimple.FastColorer$InterferenceGraph r11;
        ca.mcgill.sable.util.List r12;
        ca.mcgill.sable.util.Iterator r13;
        java.lang.Object r14, r16, r17, r22, r25, r27;
        ca.mcgill.sable.soot.jimple.Local r15, r20, r21;
        java.lang.Integer r18, r23, r24, r26;
        ca.mcgill.sable.soot.jimple.Local[] r19;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r3 := @parameter2;
        r4 := @parameter3;
        specialinvoke r0.<init>();
        r7 = r1.getStmtList();
        r8 = new ca.mcgill.sable.soot.jimple.CompleteStmtGraph;
        specialinvoke r8.<init>(r7);
        i4 = ca.mcgill.sable.soot.jimple.Main.usePackedLive;
        if i4 == 0 goto label0;

        r9 = new ca.mcgill.sable.soot.jimple.SimpleLiveLocals;
        specialinvoke r9.<init>(r8);
        r5 = r9;
        goto label1;

     label0:
        r10 = new ca.mcgill.sable.soot.jimple.SparseLiveLocals;
        specialinvoke r10.<init>(r8);
        r5 = r10;

     label1:
        r11 = new ca.mcgill.sable.soot.jimple.FastColorer$InterferenceGraph;
        specialinvoke r11.<init>(r0, r1, r2, r5);
        r6 = new int[10];
        r12 = r11.getLocals();
        r13 = r12.iterator();
        goto label13;

     label2:
        r14 = r13.next();
        r15 = (ca.mcgill.sable.soot.jimple.Local) r14;
        i5 = r3.containsKey(r15);
        if i5 != 0 goto label13;

        r16 = r2.get(r15);
        r17 = r4.get(r16);
        r18 = (java.lang.Integer) r17;
        i6 = r18.intValue();
        i7 = r6.length;
        if i7 >= i6 goto label3;

        i8 = r6.length;
        i9 = i8 * 2;
        i10 = java.lang.Math.max(i9, i6);
        r6 = new int[i10];

     label3:
        i0 = 0;
        goto label5;

     label4:
        r6[i0] = 1;
        i0 = i0 + 1;

     label5:
        if i0 < i6 goto label4;

        r19 = r11.getInterferencesOf(r15);
        i1 = 0;
        goto label8;

     label6:
        r20 = r19[i1];
        i11 = r3.containsKey(r20);
        if i11 == 0 goto label7;

        r21 = r19[i1];
        r22 = r3.get(r21);
        r23 = (java.lang.Integer) r22;
        i12 = r23.intValue();
        r6[i12] = 0;

     label7:
        i1 = i1 + 1;

     label8:
        i13 = r19.length;
        if i1 < i13 goto label6;

        i14 = 0;
        i2 = 0;
        i3 = 0;
        goto label11;

     label9:
        i15 = r6[i3];
        if i15 != 1 goto label10;

        i14 = 1;
        i2 = i3;

     label10:
        i3 = i3 + 1;

     label11:
        if i3 < i6 goto label9;

        if i14 != 0 goto label12;

        i16 = i6 + 1;
        i2 = i6;
        r24 = new java.lang.Integer;
        specialinvoke r24.<init>(i16);
        r25 = r4.put(r16, r24);

     label12:
        r26 = new java.lang.Integer;
        specialinvoke r26.<init>(i2);
        r27 = r3.put(r15, r26);

     label13:
        i17 = r13.hasNext();
        if i17 != 0 goto label2;

        return;
    }
}
