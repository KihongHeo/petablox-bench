class ca.mcgill.sable.soot.jimple.TypeResolver extends java.lang.Object
{
    private static final boolean DEBUG;
    ca.mcgill.sable.soot.jimple.ClassHierarchy classHierarchy;
    ca.mcgill.sable.soot.SootMethod currentMethod;
    static java.lang.String lastClass;
    java.util.Vector typeVariableInstances;
    private java.util.Hashtable typeVariableHashtable;
    private java.util.Hashtable typeVariableStringHashtable;
    private ca.mcgill.sable.soot.jimple.TypeResolver$ConstraintCollector constraintCollector;
    ca.mcgill.sable.util.IntSet unresolvedTypeVariables;
    boolean new_relation;
    private ca.mcgill.sable.soot.jimple.JimpleBody stmtBody;

    private void debug_locals()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        java.lang.StringBuffer r1, r9;
        ca.mcgill.sable.soot.jimple.JimpleBody r2;
        ca.mcgill.sable.util.List r3;
        ca.mcgill.sable.util.Iterator r4;
        java.lang.Object r5;
        ca.mcgill.sable.soot.jimple.Local r6;
        java.io.PrintStream r7, r13, r14;
        java.lang.String r8, r10;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r11, r12;
        int i0, i1;

        r0 := @this;
        r2 = r0.stmtBody;
        r3 = r2.getLocals();
        r4 = r3.iterator();
        goto label2;

     label0:
        r5 = r4.next();
        r6 = (ca.mcgill.sable.soot.jimple.Local) r5;
        r7 = java.lang.System.out;
        r1 = new java.lang.StringBuffer;
        r8 = java.lang.String.valueOf(r6);
        specialinvoke r1.<init>(r8);
        r9 = r1.append(": ");
        r10 = r9.toString();
        r7.print(r10);
        r11 = r0.getTypeVariable(r6);
        r12 = r11.ecr();
        if r12 != null goto label1;

        r13 = java.lang.System.out;
        r13.println("null");
        goto label2;

     label1:
        r14 = java.lang.System.out;
        i0 = r12.getEcrId();
        r14.println(i0);

     label2:
        i1 = r4.hasNext();
        if i1 != 0 goto label0;

        return;
    }

    private void debug()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        java.io.PrintStream r1, r7, r13, r18, r20, r21, r26, r28, r29, r34, r36, r41;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11;
        java.util.Vector r2, r3;
        java.lang.Object r4;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r5, r6, r23, r31, r35, r38;
        java.lang.StringBuffer r8, r10, r14, r16, r22, r24, r30, r32, r37, r39, r42, r43;
        java.lang.String r9, r11, r17, r25, r33, r40, r44;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r12;
        ca.mcgill.sable.soot.Type r15;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[] r19, r27;

        r0 := @this;
        r1 = java.lang.System.out;
        r1.println("*** DEBUG ***");
        specialinvoke r0.debug_locals();
        r2 = r0.typeVariableInstances;
        i3 = r2.size();
        i0 = 0;
        goto label10;

     label0:
        r3 = r0.typeVariableInstances;
        r4 = r3.elementAt(i0);
        r5 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r4;
        r6 = r5.ecr();
        if r5 != r6 goto label9;

        r7 = java.lang.System.out;
        r8 = new java.lang.StringBuffer;
        r9 = java.lang.String.valueOf(i0);
        specialinvoke r8.<init>(r9);
        r10 = r8.append(":");
        r11 = r10.toString();
        r7.print(r11);
        r12 = r5.getEcrTypeNode();
        if r12 == null goto label1;

        r13 = java.lang.System.out;
        r14 = new java.lang.StringBuffer;
        specialinvoke r14.<init>(" ");
        r15 = r12.getType();
        r16 = r14.append(r15);
        r17 = r16.toString();
        r13.print(r17);

     label1:
        r18 = java.lang.System.out;
        r18.println();
        r19 = r5.getEcrParents();
        i4 = r19.length;
        if i4 == 0 goto label4;

        r20 = java.lang.System.out;
        r20.print("  Parents:");
        i1 = 0;
        goto label3;

     label2:
        r21 = java.lang.System.out;
        r22 = new java.lang.StringBuffer;
        specialinvoke r22.<init>(" ");
        r23 = r19[i1];
        i5 = r23.getEcrId();
        r24 = r22.append(i5);
        r25 = r24.toString();
        r21.print(r25);
        i1 = i1 + 1;

     label3:
        i6 = r19.length;
        if i1 < i6 goto label2;

        r26 = java.lang.System.out;
        r26.println();

     label4:
        r27 = r5.getEcrChildren();
        i7 = r27.length;
        if i7 == 0 goto label7;

        r28 = java.lang.System.out;
        r28.print("  Children:");
        i2 = 0;
        goto label6;

     label5:
        r29 = java.lang.System.out;
        r30 = new java.lang.StringBuffer;
        specialinvoke r30.<init>(" ");
        r31 = r27[i2];
        i8 = r31.getEcrId();
        r32 = r30.append(i8);
        r33 = r32.toString();
        r29.print(r33);
        i2 = i2 + 1;

     label6:
        i9 = r27.length;
        if i2 < i9 goto label5;

        r34 = java.lang.System.out;
        r34.println();

     label7:
        r35 = r5.isArrayOf;
        if r35 == null goto label8;

        r36 = java.lang.System.out;
        r37 = new java.lang.StringBuffer;
        specialinvoke r37.<init>("  Array of: ");
        r38 = r5.isArrayOf;
        i10 = r38.getEcrId();
        r39 = r37.append(i10);
        r40 = r39.toString();
        r36.println(r40);

     label8:
        r41 = java.lang.System.out;
        r42 = new java.lang.StringBuffer;
        specialinvoke r42.<init>("  Array depth: ");
        i11 = r5.arrayDepth;
        r43 = r42.append(i11);
        r44 = r43.toString();
        r41.println(r44);

     label9:
        i0 = i0 + 1;

     label10:
        if i0 < i3 goto label0;

        return;
    }

    private void <init>(ca.mcgill.sable.soot.jimple.JimpleBody)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.jimple.JimpleBody r1;
        java.util.Vector r2;
        java.util.Hashtable r3, r4;
        ca.mcgill.sable.soot.jimple.TypeResolver$ConstraintCollector r5, r20;
        ca.mcgill.sable.util.IntSet r6, r47, r48, r49, r50;
        ca.mcgill.sable.soot.SootMethod r7, r11, r13;
        ca.mcgill.sable.soot.SootClass r8, r12, r14;
        java.lang.String r9, r10;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        ca.mcgill.sable.soot.SootClassManager r15;
        ca.mcgill.sable.soot.jimple.StmtList r16;
        ca.mcgill.sable.util.Iterator r17, r53;
        java.lang.Object r18, r54;
        ca.mcgill.sable.soot.jimple.Stmt r19;
        ca.mcgill.sable.soot.RefType r21, r23;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r22, r24, r26, r28, r30, r32, r34, r36, r38, r40, r42, r44, r46, r56, r57, r66, r69, r73;
        ca.mcgill.sable.soot.NullType r25;
        ca.mcgill.sable.soot.IntType r27, r37;
        ca.mcgill.sable.soot.LongType r29, r39;
        ca.mcgill.sable.soot.FloatType r31, r41;
        ca.mcgill.sable.soot.DoubleType r33, r43;
        ca.mcgill.sable.soot.StmtAddressType r35, r45;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeException r51;
        ca.mcgill.sable.util.List r52;
        ca.mcgill.sable.soot.jimple.Local r55;
        ca.mcgill.sable.soot.UnknownType r58, r60, r68;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r59, r61, r63, r64, r67, r70, r74;
        ca.mcgill.sable.soot.Type r62, r65, r71, r75;
        ca.mcgill.sable.soot.ErroneousType r72;
        ca.mcgill.sable.soot.BaseType r76;
        ca.mcgill.sable.soot.ArrayType r77;

        r0 := @this;
        r1 := @parameter0;
        specialinvoke r0.<init>();
        r2 = new java.util.Vector;
        specialinvoke r2.<init>();
        r0.typeVariableInstances = r2;
        r3 = new java.util.Hashtable;
        specialinvoke r3.<init>();
        r0.typeVariableHashtable = r3;
        r4 = new java.util.Hashtable;
        specialinvoke r4.<init>();
        r0.typeVariableStringHashtable = r4;
        r5 = new ca.mcgill.sable.soot.jimple.TypeResolver$ConstraintCollector;
        specialinvoke r5.<init>(r0);
        r0.constraintCollector = r5;
        r6 = new ca.mcgill.sable.util.IntSet;
        specialinvoke r6.<init>();
        r0.unresolvedTypeVariables = r6;

     label0:
        r0.stmtBody = r1;
        r0.currentMethod = r1.getMethod();
        r7 = r0.currentMethod;
        r8 = r7.getDeclaringClass();
        r9 = r8.getName();
        r10 = ca.mcgill.sable.soot.jimple.TypeResolver.lastClass;
        i0 = r9.equals(r10);
        if i0 != 0 goto label1;

        r11 = r0.currentMethod;
        r12 = r11.getDeclaringClass();
        ca.mcgill.sable.soot.jimple.TypeResolver.lastClass = r12.getName();

     label1:
        r13 = r0.currentMethod;
        r14 = r13.getDeclaringClass();
        r15 = r14.getManager();
        r0.classHierarchy = ca.mcgill.sable.soot.jimple.ClassHierarchy.getClassHierarchy(r15);
        r16 = r1.getStmtList();
        r17 = r16.iterator();
        goto label3;

     label2:
        r18 = r17.next();
        r19 = (ca.mcgill.sable.soot.jimple.Stmt) r18;
        r20 = r0.constraintCollector;
        r19.apply(r20);

     label3:
        i1 = r17.hasNext();
        if i1 != 0 goto label2;

        r21 = ca.mcgill.sable.soot.RefType.v("java.lang.Object");
        r22 = r0.getTypeVariable(r21);
        r23 = ca.mcgill.sable.soot.RefType.v("java.lang.Cloneable");
        r24 = r0.getTypeVariable(r23);
        r25 = ca.mcgill.sable.soot.NullType.v();
        r26 = r0.getTypeVariable(r25);
        r27 = ca.mcgill.sable.soot.IntType.v();
        r28 = r0.getTypeVariable(r27);
        i2 = specialinvoke r0.mergeAll(r28);
        r29 = ca.mcgill.sable.soot.LongType.v();
        r30 = r0.getTypeVariable(r29);
        i3 = specialinvoke r0.mergeAll(r30);
        r31 = ca.mcgill.sable.soot.FloatType.v();
        r32 = r0.getTypeVariable(r31);
        i4 = specialinvoke r0.mergeAll(r32);
        r33 = ca.mcgill.sable.soot.DoubleType.v();
        r34 = r0.getTypeVariable(r33);
        i5 = specialinvoke r0.mergeAll(r34);
        r35 = ca.mcgill.sable.soot.StmtAddressType.v();
        r36 = r0.getTypeVariable(r35);
        i6 = specialinvoke r0.mergeAll(r36);

     label4:
        r0.new_relation = 0;
        specialinvoke r0.collapseStronglyConnectedComponents();
        i7 = r0.new_relation;
        if i7 == 1 goto label4;

        specialinvoke r0.propagateArrayConstraints();
        specialinvoke r0.addRelationsBetweenHardNodes();
        r37 = ca.mcgill.sable.soot.IntType.v();
        r38 = r0.getTypeVariable(r37);
        i8 = specialinvoke r0.mergeAll(r38);
        r39 = ca.mcgill.sable.soot.LongType.v();
        r40 = r0.getTypeVariable(r39);
        i9 = specialinvoke r0.mergeAll(r40);
        r41 = ca.mcgill.sable.soot.FloatType.v();
        r42 = r0.getTypeVariable(r41);
        i10 = specialinvoke r0.mergeAll(r42);
        r43 = ca.mcgill.sable.soot.DoubleType.v();
        r44 = r0.getTypeVariable(r43);
        i11 = specialinvoke r0.mergeAll(r44);
        r45 = ca.mcgill.sable.soot.StmtAddressType.v();
        r46 = r0.getTypeVariable(r45);
        i12 = specialinvoke r0.mergeAll(r46);
        specialinvoke r0.collapseStronglyConnectedComponents();
        r47 = r0.unresolvedTypeVariables;
        i13 = r47.size();
        if i13 == 0 goto label5;

        i14 = specialinvoke r0.resolveSingleRelations();

     label5:
        i15 = 1;
        goto label7;

     label6:
        specialinvoke r0.removeIndirectRelations();
        i15 = specialinvoke r0.resolveSingleRelations();

     label7:
        r48 = r0.unresolvedTypeVariables;
        i16 = r48.size();
        if i16 == 0 goto label8;

        if i15 != 0 goto label6;

     label8:
        r49 = r0.unresolvedTypeVariables;
        i17 = r49.size();
        if i17 == 0 goto label11;

        i18 = specialinvoke r0.resolveComplexRelations();
        r50 = r0.unresolvedTypeVariables;
        i19 = r50.size();

     label9:
        goto label11;

     label10:
        r51 := @caughtexception;

     label11:
        r52 = r1.getLocals();
        r53 = r52.iterator();
        goto label19;

     label12:
        r54 = r53.next();
        r55 = (ca.mcgill.sable.soot.jimple.Local) r54;
        r56 = r0.getTypeVariable(r55);
        r57 = r56.ecr();
        if r57 != null goto label13;

        r58 = ca.mcgill.sable.soot.UnknownType.v();
        r55.setType(r58);
        goto label19;

     label13:
        i20 = r57.arrayDepth;
        if i20 != 0 goto label15;

        r59 = r57.getEcrTypeNode();
        if r59 != null goto label14;

        r60 = ca.mcgill.sable.soot.UnknownType.v();
        r55.setType(r60);
        goto label19;

     label14:
        r61 = r57.getEcrTypeNode();
        r62 = r61.getType();
        r55.setType(r62);
        goto label19;

     label15:
        r63 = r57.getEcrTypeNode();
        if r63 == null goto label16;

        r64 = r57.getEcrTypeNode();
        r65 = r64.getType();
        r55.setType(r65);
        goto label19;

     label16:
        r66 = r57.base;
        r67 = r66.getEcrTypeNode();
        if r67 != null goto label17;

        r68 = ca.mcgill.sable.soot.UnknownType.v();
        r55.setType(r68);
        goto label19;

     label17:
        r69 = r57.base;
        r70 = r69.getEcrTypeNode();
        r71 = r70.getType();
        i21 = r71 instanceof ca.mcgill.sable.soot.ErroneousType;
        if i21 == 0 goto label18;

        r72 = ca.mcgill.sable.soot.ErroneousType.v();
        r55.setType(r72);
        goto label19;

     label18:
        r73 = r57.base;
        r74 = r73.getEcrTypeNode();
        r75 = r74.getType();
        r76 = (ca.mcgill.sable.soot.BaseType) r75;
        i22 = r57.arrayDepth;
        r77 = ca.mcgill.sable.soot.ArrayType.v(r76, i22);
        r55.setType(r77);

     label19:
        i23 = r53.hasNext();
        if i23 != 0 goto label12;

        return;

        .catch ca.mcgill.sable.soot.jimple.TypeResolver$TypeException from label0 to label9 with label10
    }

    private void removeRelationsBetweenNonEcrs()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        java.util.Vector r1;
        java.util.Enumeration r2;
        java.lang.Object r3;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r4, r5;
        int i0, i1;
        ca.mcgill.sable.util.IntSet r6, r7;

        r0 := @this;
        r1 = r0.typeVariableInstances;
        r2 = r1.elements();
        goto label2;

     label0:
        r3 = r2.nextElement();
        r4 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r3;
        r5 = r4.ecr();
        if r4 != r5 goto label1;

        i0 = r4.arrayDepth;
        if i0 == 0 goto label2;

     label1:
        r6 = new ca.mcgill.sable.util.IntSet;
        specialinvoke r6.<init>();
        r4.parents = r6;
        r7 = new ca.mcgill.sable.util.IntSet;
        specialinvoke r7.<init>();
        r4.children = r7;

     label2:
        i1 = r2.hasMoreElements();
        if i1 != 0 goto label0;

        return;
    }

    private void addRelationsBetweenHardNodes()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.util.LinkedList r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        java.util.Vector r2;
        java.util.Enumeration r3;
        java.lang.Object r4, r10;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r5, r6, r11, r13;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r7, r8, r14, r15, r16, r17;
        ca.mcgill.sable.soot.Type r9;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[] r12;

        r0 := @this;
        r1 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r1.<init>();
        r2 = r0.typeVariableInstances;
        r3 = r2.elements();
        goto label1;

     label0:
        r4 = r3.nextElement();
        r5 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r4;
        r6 = r5.ecr();
        if r5 != r6 goto label1;

        r7 = r5.getEcrTypeNode();
        if r7 == null goto label1;

        r8 = r5.getEcrTypeNode();
        r9 = r8.getType();
        i1 = r9 instanceof ca.mcgill.sable.soot.ArrayType;
        if i1 != 0 goto label1;

        i2 = r1.add(r5);

     label1:
        i3 = r3.hasMoreElements();
        if i3 != 0 goto label0;

        goto label7;

     label2:
        r10 = r1.removeFirst();
        r11 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r10;
        i4 = r1.size();
        r12 = new ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[i4];
        r1.toArray(r12);
        i0 = 0;
        goto label6;

     label3:
        r13 = r12[i0];
        r14 = r11.getEcrTypeNode();
        r15 = r13.getEcrTypeNode();
        i5 = r14.hasAncestor(r15);
        if i5 == 0 goto label4;

        r11.ecrAddParent(r13);
        goto label5;

     label4:
        r16 = r11.getEcrTypeNode();
        r17 = r13.getEcrTypeNode();
        i6 = r16.hasDescendant(r17);
        if i6 == 0 goto label5;

        r11.ecrAddChild(r13);

     label5:
        i0 = i0 + 1;

     label6:
        i7 = r12.length;
        if i0 < i7 goto label3;

     label7:
        i8 = r1.size();
        if i8 > 0 goto label2;

        return;
    }

    public static void assignTypesToLocals(ca.mcgill.sable.soot.jimple.JimpleBody)
    {
        ca.mcgill.sable.soot.jimple.JimpleBody r0;
        ca.mcgill.sable.soot.jimple.TypeResolver r1;

        r0 := @parameter0;
        r1 = new ca.mcgill.sable.soot.jimple.TypeResolver;
        specialinvoke r1.<init>(r0);
        return;
    }

    ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable getTypeVariable(ca.mcgill.sable.soot.jimple.Local)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.jimple.Local r1;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r2, r5, r6;
        java.util.Hashtable r3;
        java.lang.Object r4;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.typeVariableHashtable;
        r4 = r3.get(r1);
        r5 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r4;
        r2 = r5;
        if r5 != null goto label0;

        r6 = new ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable;
        specialinvoke r6.<init>(r0, r1);
        r2 = r6;

     label0:
        return r2;
    }

    ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable getTypeVariable(ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r1;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r2, r5, r6;
        java.util.Hashtable r3;
        java.lang.Object r4;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.typeVariableHashtable;
        r4 = r3.get(r1);
        r5 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r4;
        r2 = r5;
        if r5 != null goto label0;

        r6 = new ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable;
        specialinvoke r6.<init>(r0, r1);
        r2 = r6;

     label0:
        return r2;
    }

    ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable getTypeVariable(ca.mcgill.sable.soot.SootClass)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.SootClass r1;
        ca.mcgill.sable.soot.jimple.ClassHierarchy r2;
        java.lang.String r3;
        ca.mcgill.sable.soot.RefType r4;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r5;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r6;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.classHierarchy;
        r3 = r1.getName();
        r4 = ca.mcgill.sable.soot.RefType.v(r3);
        r5 = r2.getTypeNode(r4);
        r6 = r0.getTypeVariable(r5);
        return r6;
    }

    ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable getTypeVariable(ca.mcgill.sable.soot.Type)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.Type r1;
        ca.mcgill.sable.soot.jimple.ClassHierarchy r2;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r3;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r4;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.classHierarchy;
        r3 = r2.getTypeNode(r1);
        r4 = r0.getTypeVariable(r3);
        return r4;
    }

    private void collapseStronglyConnectedComponents()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.jimple.TypeResolver$SCC r1;
        java.util.Vector r2;

        r0 := @this;
        r1 = new ca.mcgill.sable.soot.jimple.TypeResolver$SCC;
        r2 = r0.typeVariableInstances;
        specialinvoke r1.<init>(r2);
        return;
    }

    private boolean mergeAll(ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r1, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[] r2, r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;

        r0 := @this;
        r1 := @parameter0;
        r2 = r1.getEcrParents();
        r3 = r1.getEcrChildren();
        i0 = 1;
        i1 = 0;
        goto label7;

     label0:
        i0 = 0;
        i2 = 0;
        goto label3;

     label1:
        r4 = r2[i2];
        r5 = r4.ecr();
        i4 = r5.arrayDepth;
        r6 = r1.ecr();
        i5 = r6.arrayDepth;
        if i4 != i5 goto label2;

        i1 = 1;
        i0 = 1;
        r7 = r2[i2];
        r8 = r1.ecrUnion(r7);

     label2:
        i2 = i2 + 1;

     label3:
        i6 = r2.length;
        if i2 < i6 goto label1;

        i3 = 0;
        goto label6;

     label4:
        r9 = r3[i3];
        r10 = r9.ecr();
        i7 = r10.arrayDepth;
        r11 = r1.ecr();
        i8 = r11.arrayDepth;
        if i7 != i8 goto label5;

        i1 = 1;
        i0 = 1;
        r12 = r3[i3];
        r13 = r1.ecrUnion(r12);

     label5:
        i3 = i3 + 1;

     label6:
        i9 = r3.length;
        if i3 < i9 goto label4;

        r2 = r1.getEcrParents();
        r3 = r1.getEcrChildren();

     label7:
        if i0 != 0 goto label0;

        return i1;
    }

    private void propagateArrayConstraints()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;

        r0 := @this;
        specialinvoke r0.computeArrayDepths();
        specialinvoke r0.propagateConstrains();
        specialinvoke r0.mergeBaseTypeArrays();
        return;
    }

    private void mergeBaseTypeArrays()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        int i0, i1, i2, i3, i4;
        java.util.Vector r1;
        java.util.Enumeration r2;
        java.lang.Object r3;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r4, r5;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r6, r7, r9;
        ca.mcgill.sable.soot.Type r8, r10;
        ca.mcgill.sable.soot.ArrayType r11;
        ca.mcgill.sable.soot.BaseType r12;

        r0 := @this;

     label0:
        i0 = 0;
        r1 = r0.typeVariableInstances;
        r2 = r1.elements();
        goto label2;

     label1:
        r3 = r2.nextElement();
        r4 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r3;
        r5 = r4.ecr();
        if r4 != r5 goto label2;

        r6 = r4.getEcrTypeNode();
        if r6 == null goto label2;

        r7 = r4.getEcrTypeNode();
        r8 = r7.getType();
        i1 = r8 instanceof ca.mcgill.sable.soot.ArrayType;
        if i1 == 0 goto label2;

        r9 = r4.getEcrTypeNode();
        r10 = r9.getType();
        r11 = (ca.mcgill.sable.soot.ArrayType) r10;
        r12 = r11.baseType;
        i2 = r12 instanceof ca.mcgill.sable.soot.RefType;
        if i2 != 0 goto label2;

        i3 = specialinvoke r0.mergeAll(r4);
        if i3 == 0 goto label2;

        i0 = 1;

     label2:
        i4 = r2.hasMoreElements();
        if i4 != 0 goto label1;

        if i0 != 0 goto label0;

        return;
    }

    private void propagateConstrains()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15;
        java.util.Vector r1, r14, r18, r25;
        java.util.Enumeration r2, r19;
        java.lang.Object r3, r10, r15, r20, r26;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r4, r5, r6, r7, r8, r11, r16, r17, r21, r22, r27, r28, r29, r30, r32;
        ca.mcgill.sable.util.LinkedList r9;
        ca.mcgill.sable.util.IntSet r12, r23, r33;
        int[] r13, r24;
        ca.mcgill.sable.soot.RefType r31;

        r0 := @this;
        r1 = r0.typeVariableInstances;
        r2 = r1.elements();
        goto label7;

     label0:
        r3 = r2.nextElement();
        r4 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r3;
        r5 = r4.ecr();
        if r4 != r5 goto label7;

        r6 = r4.isArrayOf;
        if r6 != null goto label7;

        i1 = r4.arrayDepth;
        if i1 != 0 goto label1;

        r4.base = r4;
        goto label2;

     label1:
        r7 = new ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable;
        specialinvoke r7.<init>(r0);
        r4.base = r7;
        r8 = r4.base;
        r8.base = r4.base;

     label2:
        r9 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r9.<init>();
        i2 = r9.add(r4);
        goto label6;

     label3:
        r10 = r9.removeFirst();
        r11 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r10;
        r12 = r11.isElementOf;
        r13 = r12.elements();
        i0 = 0;
        goto label5;

     label4:
        r14 = r0.typeVariableInstances;
        i3 = r13[i0];
        r15 = r14.elementAt(i3);
        r16 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r15;
        r17 = r16.ecr();
        r17.base = r4.base;
        i4 = r9.add(r17);
        i0 = i0 + 1;

     label5:
        i5 = r13.length;
        if i0 < i5 goto label4;

     label6:
        i6 = r9.size();
        if i6 > 0 goto label3;

     label7:
        i7 = r2.hasMoreElements();
        if i7 != 0 goto label0;

        r18 = r0.typeVariableInstances;
        r19 = r18.elements();
        goto label13;

     label8:
        r20 = r19.nextElement();
        r21 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r20;
        r22 = r21.ecr();
        if r21 != r22 goto label13;

        r23 = r21.parents;
        r24 = r23.elements();
        i8 = 0;
        goto label12;

     label9:
        r25 = r0.typeVariableInstances;
        i9 = r24[i8];
        r26 = r25.elementAt(i9);
        r27 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r26;
        i10 = r27.arrayDepth;
        i11 = r21.arrayDepth;
        if i10 != i11 goto label10;

        r28 = r21.base;
        r29 = r27.base;
        r28.ecrAddParent(r29);
        goto label11;

     label10:
        r30 = r27.base;
        r31 = ca.mcgill.sable.soot.RefType.v("java.lang.Cloneable");
        r32 = r0.getTypeVariable(r31);
        r30.ecrAddChild(r32);

     label11:
        i8 = i8 + 1;

     label12:
        i12 = r24.length;
        if i8 < i12 goto label9;

        i13 = r21.arrayDepth;
        if i13 == 0 goto label13;

        r33 = r0.unresolvedTypeVariables;
        i14 = ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable.access$0(r21);
        r33.clear(i14);

     label13:
        i15 = r19.hasMoreElements();
        if i15 != 0 goto label8;

        return;
    }

    private void computeArrayDepths()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.util.LinkedList r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66;
        java.util.Vector r3, r16, r21, r25, r39, r45, r60, r66;
        java.util.Enumeration r4, r26;
        java.lang.Object r5, r12, r17, r22, r27, r30, r40, r46, r61, r67;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r6, r7, r9, r11, r13, r18, r23, r24, r28, r29, r31, r32, r33, r34, r35, r36, r41, r42, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r62, r63, r68;
        ca.mcgill.sable.util.IntSet r8, r10, r14, r19, r37, r43, r58, r64;
        int[] r15, r20, r38, r44, r59, r65;

        r0 := @this;
        r1 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r1.<init>();
        r2 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r2.<init>();
        i0 = 0;
        r3 = r0.typeVariableInstances;
        r4 = r3.elements();
        goto label2;

     label0:
        r5 = r4.nextElement();
        r6 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r5;
        r7 = r6.ecr();
        if r6 != r7 goto label2;

        i0 = i0 + 1;
        r8 = r6.parents;
        r6.count = r8.elementCount();
        r9 = r6.isArrayOf;
        if r9 == null goto label1;

        r10 = r6.parents;
        r11 = r6.isArrayOf;
        i2 = r11.getEcrId();
        i3 = r10.get(i2);
        if i3 != 0 goto label1;

        i4 = r6.count;
        r6.count = i4 + 1;

     label1:
        i5 = r6.count;
        if i5 != 0 goto label2;

        r6.arrayDepth = 0;
        i6 = r1.add(r6);

     label2:
        i7 = r4.hasMoreElements();
        if i7 != 0 goto label0;

        goto label10;

     label3:
        r12 = r1.removeFirst();
        r13 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r12;
        r14 = r13.children;
        r15 = r14.elements();
        i1 = 0;
        goto label6;

     label4:
        r16 = r0.typeVariableInstances;
        i8 = r15[i1];
        r17 = r16.elementAt(i8);
        r18 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r17;
        i9 = r18.arrayDepth;
        i10 = r13.arrayDepth;
        r18.arrayDepth = java.lang.Math.max(i9, i10);
        i11 = r18.count;
        i12 = i11 - 1;
        r18.count = i12;
        if i12 != 0 goto label5;

        i13 = r1.add(r18);

     label5:
        i1 = i1 + 1;

     label6:
        i14 = r15.length;
        if i1 < i14 goto label4;

        r19 = r13.isElementOf;
        r20 = r19.elements();
        i15 = 0;
        goto label9;

     label7:
        r21 = r0.typeVariableInstances;
        i16 = r20[i15];
        r22 = r21.elementAt(i16);
        r23 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r22;
        r24 = r23.ecr();
        i17 = r24.arrayDepth;
        i18 = r13.arrayDepth;
        i19 = i18 + 1;
        r24.arrayDepth = java.lang.Math.max(i17, i19);
        i20 = r24.count;
        i21 = i20 - 1;
        r24.count = i21;
        if i21 != 0 goto label8;

        i22 = r1.add(r24);

     label8:
        i15 = i15 + 1;

     label9:
        i23 = r20.length;
        if i15 < i23 goto label7;

        i24 = r2.add(r13);

     label10:
        i25 = r1.size();
        if i25 > 0 goto label3;

        i26 = r2.size();
        if i0 == i26 goto label28;

        r25 = r0.typeVariableInstances;
        r26 = r25.elements();
        goto label12;

     label11:
        r27 = r26.nextElement();
        r28 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r27;
        r29 = r28.ecr();

     label12:
        i27 = r26.hasMoreElements();
        if i27 != 0 goto label11;

        goto label28;

     label13:
        r30 = r2.removeFirst();
        r31 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r30;
        r31.count = 0;
        r32 = r31.isArrayOf;
        if r32 == null goto label14;

        i28 = r31.arrayDepth;
        r33 = r31.isArrayOf;
        r34 = r33.ecr();
        i29 = r34.arrayDepth;
        i30 = i29 + 1;
        if i28 >= i30 goto label14;

        r35 = r31.isArrayOf;
        r36 = r35.ecr();
        i31 = r36.arrayDepth;
        r31.arrayDepth = i31 + 1;

     label14:
        r37 = r31.isElementOf;
        r38 = r37.elements();
        i32 = 0;
        goto label17;

     label15:
        r39 = r0.typeVariableInstances;
        i33 = r38[i32];
        r40 = r39.elementAt(i33);
        r41 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r40;
        r42 = r41.ecr();
        i34 = r31.arrayDepth;
        i35 = r42.arrayDepth;
        i36 = i35 - 1;
        if i34 >= i36 goto label16;

        i37 = r42.arrayDepth;
        r31.arrayDepth = i37 - 1;

     label16:
        i32 = i32 + 1;

     label17:
        i38 = r38.length;
        if i32 < i38 goto label15;

        r43 = r31.parents;
        r44 = r43.elements();
        i39 = 0;
        goto label20;

     label18:
        r45 = r0.typeVariableInstances;
        i40 = r44[i39];
        r46 = r45.elementAt(i40);
        r47 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r46;
        r48 = r47.ecr();
        i41 = r31.arrayDepth;
        i42 = r48.arrayDepth;
        if i41 >= i42 goto label19;

        r31.arrayDepth = r48.arrayDepth;

     label19:
        i39 = i39 + 1;

     label20:
        i43 = r44.length;
        if i39 < i43 goto label18;

        r49 = r31.isArrayOf;
        if r49 == null goto label21;

        i44 = r31.arrayDepth;
        r50 = r31.isArrayOf;
        r51 = r50.ecr();
        i45 = r51.arrayDepth;
        i46 = i45 + 1;
        if i44 <= i46 goto label21;

        r52 = r31.isArrayOf;
        r53 = r52.ecr();
        i47 = r31.arrayDepth;
        r53.arrayDepth = i47 - 1;
        r54 = r31.isArrayOf;
        r55 = r54.ecr();
        i48 = r55.count;
        r55.count = i48 + 1;
        if i48 != 0 goto label21;

        r56 = r31.isArrayOf;
        r57 = r56.ecr();
        i49 = r2.add(r57);

     label21:
        r58 = r31.isElementOf;
        r59 = r58.elements();
        i50 = 0;
        goto label24;

     label22:
        r60 = r0.typeVariableInstances;
        i51 = r59[i50];
        r61 = r60.elementAt(i51);
        r62 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r61;
        r63 = r62.ecr();
        i52 = r31.arrayDepth;
        i53 = r63.arrayDepth;
        i54 = i53 - 1;
        if i52 <= i54 goto label23;

        i55 = r31.arrayDepth;
        r63.arrayDepth = i55 + 1;
        i56 = r63.count;
        r63.count = i56 + 1;
        if i56 != 0 goto label23;

        i57 = r2.add(r63);

     label23:
        i50 = i50 + 1;

     label24:
        i58 = r59.length;
        if i50 < i58 goto label22;

        r64 = r31.children;
        r65 = r64.elements();
        i59 = 0;
        goto label27;

     label25:
        r66 = r0.typeVariableInstances;
        i60 = r65[i59];
        r67 = r66.elementAt(i60);
        r68 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r67;
        i61 = r31.arrayDepth;
        i62 = r68.arrayDepth;
        if i61 <= i62 goto label26;

        r68.arrayDepth = r31.arrayDepth;
        i63 = r68.count;
        r68.count = i63 + 1;
        if i63 != 0 goto label26;

        i64 = r2.add(r68);

     label26:
        i59 = i59 + 1;

     label27:
        i65 = r65.length;
        if i59 < i65 goto label25;

     label28:
        i66 = r2.size();
        if i66 > 0 goto label13;

        return;
    }

    private boolean resolveSingleRelations()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        ca.mcgill.sable.util.IntSet r1;
        int[] r2;
        java.util.Vector r3;
        java.lang.Object r4;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r5, r9, r11, r12, r13, r14, r15, r17, r18, r20, r21, r22, r23;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r6;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[] r7, r8;
        ca.mcgill.sable.soot.NullType r10, r19;
        ca.mcgill.sable.soot.RefType r16;

        r0 := @this;
        i0 = 0;
        r1 = r0.unresolvedTypeVariables;
        r2 = r1.elements();
        i1 = 0;
        goto label6;

     label0:
        r3 = r0.typeVariableInstances;
        i2 = r2[i1];
        r4 = r3.elementAt(i2);
        r5 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r4;
        r6 = r5.getEcrTypeNode();
        if r6 != null goto label5;

        r7 = r5.getEcrParents();
        r8 = r5.getEcrChildren();
        i3 = r8.length;
        if i3 != 1 goto label1;

        r9 = r8[0];
        r10 = ca.mcgill.sable.soot.NullType.v();
        r11 = r0.getTypeVariable(r10);
        if r9 == r11 goto label1;

        i0 = 1;
        r12 = r8[0];
        r13 = r5.ecrUnion(r12);
        goto label5;

     label1:
        i4 = r7.length;
        if i4 != 1 goto label2;

        i0 = 1;
        r14 = r7[0];
        r15 = r5.ecrUnion(r14);
        goto label5;

     label2:
        i5 = r7.length;
        if i5 != 0 goto label3;

        r16 = ca.mcgill.sable.soot.RefType.v("java.lang.Object");
        r17 = r0.getTypeVariable(r16);
        i0 = 1;
        r18 = r5.ecrUnion(r17);
        goto label5;

     label3:
        i6 = r8.length;
        if i6 != 0 goto label4;

        r19 = ca.mcgill.sable.soot.NullType.v();
        r20 = r0.getTypeVariable(r19);
        i0 = 1;
        r21 = r5.ecrUnion(r20);
        goto label5;

     label4:
        i7 = r8.length;
        if i7 != 1 goto label5;

        i0 = 1;
        r22 = r8[0];
        r23 = r5.ecrUnion(r22);

     label5:
        i1 = i1 + 1;

     label6:
        i8 = r2.length;
        if i1 < i8 goto label0;

        return i0;
    }

    private void removeIndirectRelations()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.util.LinkedList r1;
        int i0, i1, i2, i3, i4;
        ca.mcgill.sable.soot.RefType r2;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r3, r6, r8, r10, r12;
        ca.mcgill.sable.util.IntSet r4, r9, r11;
        java.lang.Object r5;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[] r7;

        r0 := @this;
        r1 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r1.<init>();
        r2 = ca.mcgill.sable.soot.RefType.v("java.lang.Object");
        r3 = r0.getTypeVariable(r2);
        r1.addLast(r3);
        r4 = new ca.mcgill.sable.util.IntSet;
        specialinvoke r4.<init>();
        goto label4;

     label0:
        r5 = r1.removeFirst();
        r6 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r5;
        r6.removeEcrIndirectRelations();
        i1 = r6.getEcrId();
        r4.set(i1);
        r7 = r6.getEcrChildren();
        i0 = 0;
        goto label3;

     label1:
        r8 = r7[i0];
        r9 = r8.getEcrParentIds();
        r9.and(r4);
        r10 = r7[i0];
        r11 = r10.getEcrParentIds();
        i2 = r9.equals(r11);
        if i2 == 0 goto label2;

        r12 = r7[i0];
        r1.addLast(r12);

     label2:
        i0 = i0 + 1;

     label3:
        i3 = r7.length;
        if i0 < i3 goto label1;

     label4:
        i4 = r1.size();
        if i4 != 0 goto label0;

        return;
    }

    private boolean resolveComplexRelations()
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable r1, r7, r8, r24, r25, r27, r32;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22;
        ca.mcgill.sable.util.IntSet r2, r16, r18, r20, r26, r28;
        java.util.Vector r3, r4, r22;
        java.util.Enumeration r5, r14;
        java.lang.Object r6, r15, r19, r23, r31;
        ca.mcgill.sable.soot.jimple.ClassHierarchy$TypeNode r9, r10;
        ca.mcgill.sable.soot.Type r11;
        ca.mcgill.sable.soot.NullType r12;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[] r13;
        ca.mcgill.sable.util.LinkedList r17;
        int[] r21, r29;
        ca.mcgill.sable.util.Iterator r30;
        ca.mcgill.sable.soot.jimple.TypeResolver$1$RecursiveFunction r33;

        r0 := @this;
        r2 = r0.unresolvedTypeVariables;
        i1 = r2.size();
        if i1 != 0 goto label0;

        return 1;

     label0:
        r3 = new java.util.Vector;
        specialinvoke r3.<init>();
        r1 = null;
        r4 = r0.typeVariableInstances;
        r5 = r4.elements();
        goto label3;

     label1:
        r6 = r5.nextElement();
        r7 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r6;
        r8 = r7.ecr();
        if r8 != r7 goto label3;

        r9 = r7.getEcrTypeNode();
        if r9 == null goto label3;

        r10 = r7.getEcrTypeNode();
        r11 = r10.getType();
        r12 = ca.mcgill.sable.soot.NullType.v();
        i2 = r11.equals(r12);
        if i2 == 0 goto label2;

        r1 = r7;
        goto label3;

     label2:
        r3.addElement(r7);

     label3:
        i3 = r5.hasMoreElements();
        if i3 != 0 goto label1;

        if r1 == null goto label4;

        r3.addElement(r1);

     label4:
        i4 = r3.size();
        r13 = new ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable[i4];
        i5 = 0;
        r14 = r3.elements();
        goto label6;

     label5:
        r15 = r14.nextElement();
        i6 = i5;
        i5 = i5 + 1;
        r13[i6] = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r15;

     label6:
        i7 = r14.hasMoreElements();
        if i7 != 0 goto label5;

        r16 = new ca.mcgill.sable.util.IntSet;
        specialinvoke r16.<init>();
        r17 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r17.<init>();
        goto label12;

     label7:
        r18 = r0.unresolvedTypeVariables;
        r19 = r18.clone();
        r20 = (ca.mcgill.sable.util.IntSet) r19;
        r20.xor(r16);
        r21 = r20.elements();
        i0 = 0;
        goto label11;

     label8:
        r22 = r0.typeVariableInstances;
        i8 = r21[i0];
        r23 = r22.elementAt(i8);
        r24 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r23;
        i9 = r24.isEcrArray();
        if i9 == 0 goto label9;

        r25 = r24.getEcrIsArrayOf();
        i10 = r25.getEcrId();
        i11 = r16.get(i10);
        if i11 != 0 goto label9;

        r26 = r0.unresolvedTypeVariables;
        r27 = r24.getEcrIsArrayOf();
        i12 = r27.getEcrId();
        i13 = r26.get(i12);
        if i13 != 0 goto label10;

     label9:
        i14 = r24.getEcrId();
        r16.set(i14);
        i15 = r17.add(r24);

     label10:
        i0 = i0 + 1;

     label11:
        i16 = r21.length;
        if i0 < i16 goto label8;

     label12:
        r28 = r0.unresolvedTypeVariables;
        i17 = r16.equals(r28);
        if i17 == 0 goto label7;

        i18 = r17.size();
        r29 = new int[i18];
        i19 = 0;
        r30 = r17.iterator();
        goto label14;

     label13:
        i20 = i19;
        i19 = i19 + 1;
        r31 = r30.next();
        r32 = (ca.mcgill.sable.soot.jimple.TypeResolver$TypeVariable) r31;
        r29[i20] = r32.getEcrId();

     label14:
        i21 = r30.hasNext();
        if i21 != 0 goto label13;

        r33 = new ca.mcgill.sable.soot.jimple.TypeResolver$1$RecursiveFunction;
        specialinvoke r33.<init>(r13, r29, r0);
        i22 = r33.resolve();
        return i22;
    }

    private static void error(java.lang.String)
    {
        java.lang.String r0;
        ca.mcgill.sable.soot.jimple.TypeResolver$TypeException r1;

        r0 := @parameter0;
        r1 = new ca.mcgill.sable.soot.jimple.TypeResolver$TypeException;
        specialinvoke r1.<init>();
        throw r1;
    }

    static java.util.Hashtable access$0(ca.mcgill.sable.soot.jimple.TypeResolver)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        java.util.Hashtable r1;

        r0 := @parameter0;
        r1 = r0.typeVariableHashtable;
        return r1;
    }

    static java.util.Hashtable access$1(ca.mcgill.sable.soot.jimple.TypeResolver)
    {
        ca.mcgill.sable.soot.jimple.TypeResolver r0;
        java.util.Hashtable r1;

        r0 := @parameter0;
        r1 = r0.typeVariableStringHashtable;
        return r1;
    }

    static void access$2(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0;
        ca.mcgill.sable.soot.jimple.TypeResolver.error(r0);
        return;
    }

    static boolean access$3()
    {
        return 0;
    }
}
