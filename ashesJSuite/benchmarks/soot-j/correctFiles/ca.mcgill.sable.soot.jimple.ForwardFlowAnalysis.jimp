public abstract class ca.mcgill.sable.soot.jimple.ForwardFlowAnalysis extends ca.mcgill.sable.soot.jimple.FlowAnalysis
{

    public void <init>(ca.mcgill.sable.soot.jimple.StmtGraph)
    {
        ca.mcgill.sable.soot.jimple.ForwardFlowAnalysis r0;
        ca.mcgill.sable.soot.jimple.StmtGraph r1;

        r0 := @this;
        r1 := @parameter0;
        specialinvoke r0.<init>(r1);
        return;
    }

    protected boolean isForward()
    {
        ca.mcgill.sable.soot.jimple.ForwardFlowAnalysis r0;

        r0 := @this;
        return 1;
    }

    protected void doAnalysis()
    {
        ca.mcgill.sable.soot.jimple.ForwardFlowAnalysis r0;
        ca.mcgill.sable.util.LinkedList r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14;
        ca.mcgill.sable.util.HashSet r2;
        ca.mcgill.sable.soot.jimple.StmtGraph r3, r4, r19, r35;
        ca.mcgill.sable.util.Iterator r5, r26, r37;
        java.lang.Object r6, r9, r10, r12, r13, r14, r15, r18, r22, r24, r25, r28, r29, r31, r32, r34, r38;
        ca.mcgill.sable.soot.jimple.Stmt r7, r16, r39;
        ca.mcgill.sable.util.Map r8, r11, r17, r21, r23, r27, r30, r33;
        ca.mcgill.sable.util.List r20, r36;

        r0 := @this;
        r1 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r1.<init>();
        r2 = new ca.mcgill.sable.util.HashSet;
        specialinvoke r2.<init>();
        r3 = r0.graph;
        i1 = r3.size();
        i0 = 0;
        r4 = r0.graph;
        r5 = r4.iterator();
        goto label1;

     label0:
        r6 = r5.next();
        r7 = (ca.mcgill.sable.soot.jimple.Stmt) r6;
        r1.addLast(r7);
        i2 = r2.add(r7);
        r8 = r0.stmtToBeforeFlow;
        r9 = r0.newInitialFlow();
        r10 = r8.put(r7, r9);
        r11 = r0.stmtToAfterFlow;
        r12 = r0.newInitialFlow();
        r13 = r11.put(r7, r12);

     label1:
        i3 = r5.hasNext();
        if i3 != 0 goto label0;

        r14 = r0.newInitialFlow();
        goto label9;

     label2:
        r15 = r1.removeFirst();
        r16 = (ca.mcgill.sable.soot.jimple.Stmt) r15;
        i4 = r2.remove(r16);
        r17 = r0.stmtToAfterFlow;
        r18 = r17.get(r16);
        r0.copy(r18, r14);
        r19 = r0.graph;
        r20 = r19.getPredsOf(r16);
        r21 = r0.stmtToBeforeFlow;
        r22 = r21.get(r16);
        i5 = r20.size();
        if i5 != 1 goto label3;

        r23 = r0.stmtToAfterFlow;
        r24 = r20.get(0);
        r25 = r23.get(r24);
        r0.copy(r25, r22);
        goto label6;

     label3:
        i6 = r20.size();
        if i6 == 0 goto label6;

        r26 = r20.iterator();
        r27 = r0.stmtToAfterFlow;
        r28 = r26.next();
        r29 = r27.get(r28);
        r0.copy(r29, r22);
        goto label5;

     label4:
        r30 = r0.stmtToAfterFlow;
        r31 = r26.next();
        r32 = r30.get(r31);
        r0.merge(r22, r32, r22);

     label5:
        i7 = r26.hasNext();
        if i7 != 0 goto label4;

     label6:
        r33 = r0.stmtToAfterFlow;
        r34 = r33.get(r16);
        r0.flowThrough(r22, r16, r34);
        i0 = i0 + 1;
        i8 = r34.equals(r14);
        if i8 != 0 goto label9;

        r35 = r0.graph;
        r36 = r35.getSuccsOf(r16);
        r37 = r36.iterator();
        goto label8;

     label7:
        r38 = r37.next();
        r39 = (ca.mcgill.sable.soot.jimple.Stmt) r38;
        i9 = r2.contains(r39);
        if i9 != 0 goto label8;

        r1.addLast(r39);
        i10 = r2.add(r39);

     label8:
        i11 = r37.hasNext();
        if i11 != 0 goto label7;

     label9:
        i12 = r1.isEmpty();
        if i12 == 0 goto label2;

        i13 = ca.mcgill.sable.soot.jimple.Main.totalFlowNodes;
        ca.mcgill.sable.soot.jimple.Main.totalFlowNodes = i13 + i1;
        i14 = ca.mcgill.sable.soot.jimple.Main.totalFlowComputations;
        ca.mcgill.sable.soot.jimple.Main.totalFlowComputations = i14 + i0;
        return;
    }
}
