public class ca.mcgill.sable.soot.jimple.StmtGraph extends java.lang.Object
{
    ca.mcgill.sable.util.List heads;
    ca.mcgill.sable.util.List tails;
    ca.mcgill.sable.util.Map stmtToSuccs;
    ca.mcgill.sable.util.Map stmtToPreds;
    ca.mcgill.sable.soot.SootMethod method;
    ca.mcgill.sable.util.List stmts;
    int size;
    ca.mcgill.sable.soot.jimple.StmtList stmtList;
    private boolean isPseudoTopologicalOrderReady;
    private ca.mcgill.sable.util.List topOrder;
    private boolean isReversePseudoTopologicalOrderReady;
    private ca.mcgill.sable.util.List reverseTopOrder;
    private ca.mcgill.sable.util.Map stmtToColor;
    private final int WHITE;
    private final int GRAY;
    private final int BLACK;
    private ca.mcgill.sable.util.LinkedList order;
    private boolean isReversed;

    public ca.mcgill.sable.soot.jimple.StmtBody getBody()
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.soot.jimple.StmtList r1;
        ca.mcgill.sable.soot.jimple.StmtBody r2;

        r0 := @this;
        r1 = r0.stmtList;
        r2 = r1.getBody();
        return r2;
    }

    void <init>(ca.mcgill.sable.soot.jimple.StmtList, boolean)
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.soot.jimple.StmtList r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61;
        ca.mcgill.sable.soot.jimple.StmtBody r2, r47;
        java.io.PrintStream r3;
        java.lang.StringBuffer r4, r7, r8;
        ca.mcgill.sable.soot.SootMethod r5;
        java.lang.String r6, r9;
        ca.mcgill.sable.soot.Timer r10, r123;
        ca.mcgill.sable.util.LinkedList r11;
        ca.mcgill.sable.util.List r12, r13, r35, r40, r48, r64, r70, r83, r84, r96, r100, r105, r107, r115, r122;
        ca.mcgill.sable.util.HashMap r14, r15, r16, r46, r86;
        ca.mcgill.sable.util.ListIterator r17, r25, r30, r58, r77;
        java.lang.Object r18, r26, r31, r32, r37, r42, r43, r45, r50, r59, r60, r63, r66, r69, r73, r75, r78, r82, r85, r88, r90, r92, r95, r98, r99, r102, r104, r108, r111, r114, r118, r121;
        ca.mcgill.sable.soot.jimple.Stmt r19, r24, r27, r53, r55, r57, r61, r67, r74, r76, r79, r93, r103, r112, r119;
        ca.mcgill.sable.util.ArrayList r20, r71, r89, r109, r116;
        ca.mcgill.sable.soot.jimple.GotoStmt r21;
        ca.mcgill.sable.soot.jimple.Unit r22, r34, r39, r52, r54, r56;
        ca.mcgill.sable.soot.jimple.IfStmt r23;
        ca.mcgill.sable.soot.jimple.AssignStmt r28;
        ca.mcgill.sable.soot.jimple.Value r29;
        ca.mcgill.sable.soot.jimple.LookupSwitchStmt r33;
        ca.mcgill.sable.util.Iterator r36, r41, r49, r65, r72, r87, r91, r97, r101, r110, r117;
        ca.mcgill.sable.soot.jimple.TableSwitchStmt r38;
        ca.mcgill.sable.util.Map r44, r62, r68, r80, r81, r94, r106, r113, r120;
        ca.mcgill.sable.soot.jimple.Trap r51;

        r0 := @this;
        r1 := @parameter0;
        i0 := @parameter1;
        specialinvoke r0.<init>();
        r0.GRAY = 1;
        r0.BLACK = 2;
        r0.stmtList = r1;
        r2 = r0.getBody();
        r0.method = r2.getMethod();
        i2 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i2 == 0 goto label0;

        r3 = java.lang.System.out;
        r4 = new java.lang.StringBuffer;
        specialinvoke r4.<init>("[");
        r5 = r0.method;
        r6 = r5.getName();
        r7 = r4.append(r6);
        r8 = r7.append("]     Constructing StmtGraph...");
        r9 = r8.toString();
        r3.println(r9);

     label0:
        i3 = ca.mcgill.sable.soot.jimple.Main.isProfilingOptimization;
        if i3 == 0 goto label1;

        r10 = ca.mcgill.sable.soot.jimple.Main.graphTimer;
        r10.start();

     label1:
        r11 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r11.<init>();
        r0.stmts = r11;
        r12 = r0.stmts;
        i4 = r12.addAll(r1);
        r13 = r0.stmts;
        r0.stmts = ca.mcgill.sable.util.Collections.unmodifiableList(r13);
        r0.size = r1.size();
        r14 = new ca.mcgill.sable.util.HashMap;
        specialinvoke r14.<init>();
        r15 = new ca.mcgill.sable.util.HashMap;
        i5 = r0.size;
        i6 = i5 * 2;
        i7 = i6 + 1;
        specialinvoke r15.<init>(i7, 0.7F);
        r0.stmtToSuccs = r15;
        r16 = new ca.mcgill.sable.util.HashMap;
        i8 = r0.size;
        i9 = i8 * 2;
        i10 = i9 + 1;
        specialinvoke r16.<init>(i10, 0.7F);
        r0.stmtToPreds = r16;
        r17 = r1.listIterator();
        goto label18;

     label2:
        r18 = r17.next();
        r19 = (ca.mcgill.sable.soot.jimple.Stmt) r18;
        r20 = new ca.mcgill.sable.util.ArrayList;
        specialinvoke r20.<init>();
        i1 = 1;
        i11 = r19 instanceof ca.mcgill.sable.soot.jimple.GotoStmt;
        if i11 == 0 goto label3;

        r21 = (ca.mcgill.sable.soot.jimple.GotoStmt) r19;
        r22 = r21.getTarget();
        i12 = r20.add(r22);
        i1 = 0;
        goto label16;

     label3:
        i13 = r19 instanceof ca.mcgill.sable.soot.jimple.IfStmt;
        if i13 == 0 goto label4;

        r23 = (ca.mcgill.sable.soot.jimple.IfStmt) r19;
        r24 = r23.getTarget();
        i14 = r20.add(r24);
        goto label16;

     label4:
        i15 = r19 instanceof ca.mcgill.sable.soot.jimple.ReturnStmt;
        if i15 != 0 goto label5;

        i16 = r19 instanceof ca.mcgill.sable.soot.jimple.ReturnVoidStmt;
        if i16 == 0 goto label6;

     label5:
        i1 = 0;
        goto label16;

     label6:
        i17 = r19 instanceof ca.mcgill.sable.soot.jimple.RetStmt;
        if i17 == 0 goto label9;

        r25 = r1.listIterator();
        goto label8;

     label7:
        r26 = r25.next();
        r27 = (ca.mcgill.sable.soot.jimple.Stmt) r26;
        i18 = r27 instanceof ca.mcgill.sable.soot.jimple.AssignStmt;
        if i18 == 0 goto label8;

        r28 = (ca.mcgill.sable.soot.jimple.AssignStmt) r27;
        r29 = r28.getRightOp();
        i19 = r29 instanceof ca.mcgill.sable.soot.jimple.NextNextStmtRef;
        if i19 == 0 goto label8;

        i20 = r25.nextIndex();
        r30 = r1.listIterator(i20);
        i21 = r30.hasNext();
        if i21 == 0 goto label8;

        r31 = r30.next();
        i22 = r30.hasNext();
        if i22 == 0 goto label8;

        r32 = r30.next();
        i23 = r20.add(r32);

     label8:
        i24 = r25.hasNext();
        if i24 != 0 goto label7;

        i1 = 0;
        goto label16;

     label9:
        i25 = r19 instanceof ca.mcgill.sable.soot.jimple.ThrowStmt;
        if i25 == 0 goto label10;

        i1 = 0;
        goto label16;

     label10:
        i26 = r19 instanceof ca.mcgill.sable.soot.jimple.LookupSwitchStmt;
        if i26 == 0 goto label13;

        r33 = (ca.mcgill.sable.soot.jimple.LookupSwitchStmt) r19;
        r34 = r33.getDefaultTarget();
        i27 = r20.add(r34);
        r35 = r33.getTargets();
        r36 = r35.iterator();
        goto label12;

     label11:
        r37 = r36.next();
        i28 = r20.add(r37);

     label12:
        i29 = r36.hasNext();
        if i29 != 0 goto label11;

        i1 = 0;
        goto label16;

     label13:
        i30 = r19 instanceof ca.mcgill.sable.soot.jimple.TableSwitchStmt;
        if i30 == 0 goto label16;

        r38 = (ca.mcgill.sable.soot.jimple.TableSwitchStmt) r19;
        r39 = r38.getDefaultTarget();
        i31 = r20.add(r39);
        r40 = r38.getTargets();
        r41 = r40.iterator();
        goto label15;

     label14:
        r42 = r41.next();
        i32 = r20.add(r42);

     label15:
        i33 = r41.hasNext();
        if i33 != 0 goto label14;

        i1 = 0;

     label16:
        if i1 == 0 goto label17;

        i34 = r17.nextIndex();
        r43 = r1.get(i34);
        i35 = r20.add(r43);

     label17:
        r44 = r0.stmtToSuccs;
        r45 = r44.put(r19, r20);

     label18:
        i36 = r17.hasNext();
        if i36 != 0 goto label2;

        if i0 == 0 goto label26;

        r46 = new ca.mcgill.sable.util.HashMap;
        specialinvoke r46.<init>();
        r47 = r0.getBody();
        r48 = r47.getTraps();
        r49 = r48.iterator();
        goto label21;

     label19:
        r50 = r49.next();
        r51 = (ca.mcgill.sable.soot.jimple.Trap) r50;
        r52 = r51.getBeginUnit();
        r53 = (ca.mcgill.sable.soot.jimple.Stmt) r52;
        r54 = r51.getHandlerUnit();
        r55 = (ca.mcgill.sable.soot.jimple.Stmt) r54;
        r56 = r51.getEndUnit();
        r57 = (ca.mcgill.sable.soot.jimple.Stmt) r56;
        i37 = r1.indexOf(r53);
        r58 = r1.listIterator(i37);
        r59 = r46.put(r53, r55);

     label20:
        r60 = r58.next();
        r61 = (ca.mcgill.sable.soot.jimple.Stmt) r60;
        r62 = r0.stmtToSuccs;
        r63 = r62.get(r61);
        r64 = (ca.mcgill.sable.util.List) r63;
        i38 = r64.add(r55);
        if r61 != r57 goto label20;

        goto label21;

     label21:
        i39 = r49.hasNext();
        if i39 != 0 goto label19;

        r65 = r1.iterator();
        goto label25;

     label22:
        r66 = r65.next();
        r67 = (ca.mcgill.sable.soot.jimple.Stmt) r66;
        r68 = r0.stmtToSuccs;
        r69 = r68.get(r67);
        r70 = (ca.mcgill.sable.util.List) r69;
        r71 = new ca.mcgill.sable.util.ArrayList;
        specialinvoke r71.<init>();
        i40 = r71.addAll(r70);
        r72 = r71.iterator();
        goto label24;

     label23:
        r73 = r72.next();
        r74 = (ca.mcgill.sable.soot.jimple.Stmt) r73;
        i41 = r46.containsKey(r74);
        if i41 == 0 goto label24;

        r75 = r46.get(r74);
        r76 = (ca.mcgill.sable.soot.jimple.Stmt) r75;
        i42 = r70.contains(r76);
        if i42 != 0 goto label24;

        i43 = r70.add(r76);

     label24:
        i44 = r72.hasNext();
        if i44 != 0 goto label23;

     label25:
        i45 = r65.hasNext();
        if i45 != 0 goto label22;

     label26:
        r77 = r1.listIterator();
        goto label28;

     label27:
        r78 = r77.next();
        r79 = (ca.mcgill.sable.soot.jimple.Stmt) r78;
        r80 = r0.stmtToSuccs;
        r81 = r0.stmtToSuccs;
        r82 = r81.get(r79);
        r83 = (ca.mcgill.sable.util.List) r82;
        r84 = ca.mcgill.sable.util.Collections.unmodifiableList(r83);
        r85 = r80.put(r79, r84);

     label28:
        i46 = r77.hasNext();
        if i46 != 0 goto label27;

        r86 = new ca.mcgill.sable.util.HashMap;
        i47 = r0.size;
        i48 = i47 * 2;
        i49 = i48 + 1;
        specialinvoke r86.<init>(i49, 0.7F);
        r87 = r1.iterator();
        goto label30;

     label29:
        r88 = r87.next();
        r89 = new ca.mcgill.sable.util.ArrayList;
        specialinvoke r89.<init>();
        r90 = r86.put(r88, r89);

     label30:
        i50 = r87.hasNext();
        if i50 != 0 goto label29;

        r91 = r1.iterator();
        goto label34;

     label31:
        r92 = r91.next();
        r93 = (ca.mcgill.sable.soot.jimple.Stmt) r92;
        r94 = r0.stmtToSuccs;
        r95 = r94.get(r93);
        r96 = (ca.mcgill.sable.util.List) r95;
        r97 = r96.iterator();
        goto label33;

     label32:
        r98 = r97.next();
        r99 = r86.get(r98);
        r100 = (ca.mcgill.sable.util.List) r99;
        i51 = r100.add(r93);

     label33:
        i52 = r97.hasNext();
        if i52 != 0 goto label32;

     label34:
        i53 = r91.hasNext();
        if i53 != 0 goto label31;

        r101 = r1.iterator();
        goto label36;

     label35:
        r102 = r101.next();
        r103 = (ca.mcgill.sable.soot.jimple.Stmt) r102;
        r104 = r86.get(r103);
        r105 = (ca.mcgill.sable.util.List) r104;
        r106 = r0.stmtToPreds;
        r107 = ca.mcgill.sable.util.Collections.unmodifiableList(r105);
        r108 = r106.put(r103, r107);

     label36:
        i54 = r101.hasNext();
        if i54 != 0 goto label35;

        r109 = new ca.mcgill.sable.util.ArrayList;
        specialinvoke r109.<init>();
        r110 = r1.iterator();
        goto label38;

     label37:
        r111 = r110.next();
        r112 = (ca.mcgill.sable.soot.jimple.Stmt) r111;
        r113 = r0.stmtToSuccs;
        r114 = r113.get(r112);
        r115 = (ca.mcgill.sable.util.List) r114;
        i55 = r115.size();
        if i55 != 0 goto label38;

        i56 = r109.add(r112);

     label38:
        i57 = r110.hasNext();
        if i57 != 0 goto label37;

        r0.tails = ca.mcgill.sable.util.Collections.unmodifiableList(r109);
        r116 = new ca.mcgill.sable.util.ArrayList;
        specialinvoke r116.<init>();
        r117 = r1.iterator();
        goto label40;

     label39:
        r118 = r117.next();
        r119 = (ca.mcgill.sable.soot.jimple.Stmt) r118;
        r120 = r0.stmtToPreds;
        r121 = r120.get(r119);
        r122 = (ca.mcgill.sable.util.List) r121;
        i58 = r122.size();
        if i58 != 0 goto label40;

        i59 = r116.add(r119);

     label40:
        i60 = r117.hasNext();
        if i60 != 0 goto label39;

        r0.heads = ca.mcgill.sable.util.Collections.unmodifiableList(r116);
        i61 = ca.mcgill.sable.soot.jimple.Main.isProfilingOptimization;
        if i61 == 0 goto label41;

        r123 = ca.mcgill.sable.soot.jimple.Main.graphTimer;
        r123.end();

     label41:
        return;
    }

    public ca.mcgill.sable.util.List getHeads()
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.util.List r1;

        r0 := @this;
        r1 = r0.heads;
        return r1;
    }

    public ca.mcgill.sable.util.List getTails()
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.util.List r1;

        r0 := @this;
        r1 = r0.tails;
        return r1;
    }

    public ca.mcgill.sable.util.List getPredsOf(ca.mcgill.sable.soot.jimple.Stmt)
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.soot.jimple.Stmt r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.util.Map r3, r7;
        int i0;
        java.lang.RuntimeException r4;
        java.lang.String r6;
        java.lang.Object r8;
        ca.mcgill.sable.util.List r9;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.stmtToPreds;
        i0 = r3.containsKey(r1);
        if i0 != 0 goto label0;

        r4 = new java.lang.RuntimeException;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("Invalid stmt");
        r5 = r2.append(r1);
        r6 = r5.toString();
        specialinvoke r4.<init>(r6);
        throw r4;

     label0:
        r7 = r0.stmtToPreds;
        r8 = r7.get(r1);
        r9 = (ca.mcgill.sable.util.List) r8;
        return r9;
    }

    public ca.mcgill.sable.util.List getSuccsOf(ca.mcgill.sable.soot.jimple.Stmt)
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.soot.jimple.Stmt r1;
        java.lang.StringBuffer r2, r5;
        ca.mcgill.sable.util.Map r3, r7;
        int i0;
        java.lang.RuntimeException r4;
        java.lang.String r6;
        java.lang.Object r8;
        ca.mcgill.sable.util.List r9;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.stmtToSuccs;
        i0 = r3.containsKey(r1);
        if i0 != 0 goto label0;

        r4 = new java.lang.RuntimeException;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("Invalid stmt");
        r5 = r2.append(r1);
        r6 = r5.toString();
        specialinvoke r4.<init>(r6);
        throw r4;

     label0:
        r7 = r0.stmtToSuccs;
        r8 = r7.get(r1);
        r9 = (ca.mcgill.sable.util.List) r8;
        return r9;
    }

    public ca.mcgill.sable.util.Iterator iterator()
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.util.List r1;
        ca.mcgill.sable.util.Iterator r2;

        r0 := @this;
        r1 = r0.stmts;
        r2 = r1.iterator();
        return r2;
    }

    public int size()
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        int i0;

        r0 := @this;
        i0 = r0.size;
        return i0;
    }

    public ca.mcgill.sable.util.Iterator pseudoTopologicalOrderIterator()
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        int i0;
        ca.mcgill.sable.util.LinkedList r1;
        ca.mcgill.sable.util.List r2;
        ca.mcgill.sable.util.Iterator r3;

        r0 := @this;
        i0 = r0.isPseudoTopologicalOrderReady;
        if i0 != 0 goto label0;

        r1 = specialinvoke r0.computeOrder(0);
        r0.topOrder = ca.mcgill.sable.util.Collections.unmodifiableList(r1);
        r0.isPseudoTopologicalOrderReady = 1;

     label0:
        r2 = r0.topOrder;
        r3 = r2.iterator();
        return r3;
    }

    public ca.mcgill.sable.util.Iterator reversePseudoTopologicalOrderIterator()
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        int i0;
        ca.mcgill.sable.util.LinkedList r1;
        ca.mcgill.sable.util.List r2;
        ca.mcgill.sable.util.Iterator r3;

        r0 := @this;
        i0 = r0.isReversePseudoTopologicalOrderReady;
        if i0 != 0 goto label0;

        r1 = specialinvoke r0.computeOrder(0);
        r0.reverseTopOrder = ca.mcgill.sable.util.Collections.unmodifiableList(r1);
        r0.isReversePseudoTopologicalOrderReady = 1;

     label0:
        r2 = r0.reverseTopOrder;
        r3 = r2.iterator();
        return r3;
    }

    private ca.mcgill.sable.util.LinkedList computeOrder(boolean)
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        int i0, i1, i2, i3;
        ca.mcgill.sable.util.HashMap r1;
        ca.mcgill.sable.util.LinkedList r2, r15;
        ca.mcgill.sable.util.Iterator r3, r9;
        java.lang.Object r4, r8, r10, r13;
        ca.mcgill.sable.soot.jimple.Stmt r5, r11;
        ca.mcgill.sable.util.Map r6, r12;
        java.lang.Integer r7, r14;

        r0 := @this;
        i0 := @parameter0;
        r1 = new ca.mcgill.sable.util.HashMap;
        specialinvoke r1.<init>();
        r0.stmtToColor = r1;
        r0.isReversed = i0;
        r2 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r2.<init>();
        r0.order = r2;
        r3 = r0.iterator();
        goto label1;

     label0:
        r4 = r3.next();
        r5 = (ca.mcgill.sable.soot.jimple.Stmt) r4;
        r6 = r0.stmtToColor;
        r7 = new java.lang.Integer;
        specialinvoke r7.<init>(0);
        r8 = r6.put(r5, r7);

     label1:
        i1 = r3.hasNext();
        if i1 != 0 goto label0;

        r9 = r0.iterator();
        goto label3;

     label2:
        r10 = r9.next();
        r11 = (ca.mcgill.sable.soot.jimple.Stmt) r10;
        r12 = r0.stmtToColor;
        r13 = r12.get(r11);
        r14 = (java.lang.Integer) r13;
        i2 = r14.intValue();
        if i2 != 0 goto label3;

        specialinvoke r0.visitStmt(r11);

     label3:
        i3 = r9.hasNext();
        if i3 != 0 goto label2;

        r15 = r0.order;
        return r15;
    }

    private void visitStmt(ca.mcgill.sable.soot.jimple.Stmt)
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.soot.jimple.Stmt r1, r11, r23;
        ca.mcgill.sable.util.LinkedList r2, r4, r14, r15;
        java.lang.Integer r3, r7, r9, r12, r17, r26, r28, r30;
        ca.mcgill.sable.util.Map r5, r16, r24, r27;
        java.lang.Object r6, r8, r10, r18, r19, r20, r22, r25, r29;
        int i0, i1, i2, i3, i4, i5;
        ca.mcgill.sable.util.List r13, r21;

        r0 := @this;
        r1 := @parameter0;
        r2 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r2.<init>();
        r4 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r4.<init>();
        r5 = r0.stmtToColor;
        r3 = new java.lang.Integer;
        specialinvoke r3.<init>(1);
        r6 = r5.put(r1, r3);
        r2.addLast(r1);
        r7 = new java.lang.Integer;
        specialinvoke r7.<init>(-1);
        r4.addLast(r7);
        goto label4;

     label0:
        r8 = r4.removeLast();
        r9 = (java.lang.Integer) r8;
        i0 = r9.intValue();
        r10 = r2.getLast();
        r11 = (ca.mcgill.sable.soot.jimple.Stmt) r10;
        i1 = i0 + 1;
        r12 = new java.lang.Integer;
        specialinvoke r12.<init>(i1);
        r4.addLast(r12);
        r13 = r0.getSuccsOf(r11);
        i2 = r13.size();
        if i1 < i2 goto label3;

        i3 = r0.isReversed;
        if i3 == 0 goto label1;

        r14 = r0.order;
        r14.addLast(r11);
        goto label2;

     label1:
        r15 = r0.order;
        r15.addFirst(r11);

     label2:
        r16 = r0.stmtToColor;
        r17 = new java.lang.Integer;
        specialinvoke r17.<init>(2);
        r18 = r16.put(r11, r17);
        r19 = r2.removeLast();
        r20 = r4.removeLast();
        goto label4;

     label3:
        r21 = r0.getSuccsOf(r11);
        r22 = r21.get(i1);
        r23 = (ca.mcgill.sable.soot.jimple.Stmt) r22;
        r24 = r0.stmtToColor;
        r25 = r24.get(r23);
        r26 = (java.lang.Integer) r25;
        i4 = r26.intValue();
        if i4 != 0 goto label4;

        r27 = r0.stmtToColor;
        r28 = new java.lang.Integer;
        specialinvoke r28.<init>(1);
        r29 = r27.put(r23, r28);
        r2.addLast(r23);
        r30 = new java.lang.Integer;
        specialinvoke r30.<init>(-1);
        r4.addLast(r30);

     label4:
        i5 = r2.isEmpty();
        if i5 == 0 goto label0;

        return;
    }

    public ca.mcgill.sable.util.List getExtendedBasicBlockPathBetween(ca.mcgill.sable.soot.jimple.Stmt, ca.mcgill.sable.soot.jimple.Stmt)
    {
        ca.mcgill.sable.soot.jimple.StmtGraph r0;
        ca.mcgill.sable.soot.jimple.Stmt r1, r2, r8, r13, r22;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14;
        ca.mcgill.sable.util.List r3, r9, r14, r23;
        ca.mcgill.sable.util.LinkedList r4, r5;
        java.lang.Integer r6, r11, r18, r19, r24, r26, r28;
        java.lang.Object r7, r10, r12, r15, r16, r17, r20, r21, r25, r27;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r3 = r0.getPredsOf(r2);
        i1 = r3.size();
        if i1 <= 1 goto label0;

        return null;

     label0:
        r4 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r4.<init>();
        r5 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r5.<init>();
        i2 = r4.add(r1);
        r6 = new java.lang.Integer;
        specialinvoke r6.<init>(0);
        i3 = r5.add(r6);
        r7 = r4.get(0);
        r8 = (ca.mcgill.sable.soot.jimple.Stmt) r7;
        r9 = r0.getSuccsOf(r8);
        i4 = r9.size();
        i0 = 0;
        goto label5;

     label1:
        r10 = r5.get(i0);
        r11 = (java.lang.Integer) r10;
        i5 = r11.intValue();
        r12 = r4.get(i0);
        r13 = (ca.mcgill.sable.soot.jimple.Stmt) r12;
        r14 = r0.getSuccsOf(r13);
        i6 = r14.size();
        if i5 < i6 goto label2;

        r15 = r4.remove(i0);
        r16 = r5.remove(i0);
        i0 = i0 + -1;
        r17 = r5.get(i0);
        r18 = (java.lang.Integer) r17;
        i7 = r18.intValue();
        r19 = new java.lang.Integer;
        i8 = i7 + 1;
        specialinvoke r19.<init>(i8);
        r20 = r5.set(i0, r19);
        goto label5;

     label2:
        r21 = r14.get(i5);
        r22 = (ca.mcgill.sable.soot.jimple.Stmt) r21;
        if r22 != r2 goto label3;

        i9 = r4.add(r2);
        return r4;

     label3:
        r23 = r0.getPredsOf(r22);
        i10 = r23.size();
        if i10 <= 1 goto label4;

        r24 = new java.lang.Integer;
        i11 = i5 + 1;
        specialinvoke r24.<init>(i11);
        r25 = r5.set(i0, r24);
        goto label5;

     label4:
        i0 = i0 + 1;
        r26 = new java.lang.Integer;
        specialinvoke r26.<init>(0);
        i12 = r5.add(r26);
        i13 = r4.add(r22);

     label5:
        r27 = r5.get(0);
        r28 = (java.lang.Integer) r27;
        i14 = r28.intValue();
        if i14 != i4 goto label1;

        return null;
    }
}
