public class ca.mcgill.sable.soot.jimple.JasminClass extends java.lang.Object
{
    ca.mcgill.sable.util.Map stmtToLabel;
    ca.mcgill.sable.util.Map localToSlot;
    ca.mcgill.sable.util.Map subroutineToReturnAddressSlot;
    ca.mcgill.sable.util.List code;
    boolean isEmittingMethodCode;
    int labelCount;
    boolean isNextGotoAJsr;
    int returnAddressSlot;
    int currentStackHeight;
    int maxStackHeight;
    ca.mcgill.sable.util.Map localToGroup;
    ca.mcgill.sable.util.Map groupToColorCount;
    ca.mcgill.sable.util.Map localToColor;
    ca.mcgill.sable.soot.jimple.Value plusPlusValue;
    ca.mcgill.sable.soot.jimple.Local plusPlusHolder;
    int plusPlusState;
    int plusPlusPlace;
    int plusPlusHeight;
    ca.mcgill.sable.soot.jimple.Stmt plusPlusIncrementer;

    java.lang.String slashify(java.lang.String)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        java.lang.String r1, r2;

        r0 := @this;
        r1 := @parameter0;
        r2 = r1.replace(46, 47);
        return r2;
    }

    int sizeOfType(ca.mcgill.sable.soot.Type)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.Type r1;
        int i0, i1, i2;

        r0 := @this;
        r1 := @parameter0;
        i0 = r1 instanceof ca.mcgill.sable.soot.DoubleType;
        if i0 != 0 goto label0;

        i1 = r1 instanceof ca.mcgill.sable.soot.LongType;
        if i1 == 0 goto label1;

     label0:
        return 2;

     label1:
        i2 = r1 instanceof ca.mcgill.sable.soot.VoidType;
        if i2 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    int argCountOf(ca.mcgill.sable.soot.SootMethod)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.SootMethod r1;
        int i0, i1, i2;
        ca.mcgill.sable.util.List r2;
        ca.mcgill.sable.util.Iterator r3;
        java.lang.Object r4;
        ca.mcgill.sable.soot.Type r5;

        r0 := @this;
        r1 := @parameter0;
        i0 = 0;
        r2 = r1.getParameterTypes();
        r3 = r2.iterator();
        goto label1;

     label0:
        r4 = r3.next();
        r5 = (ca.mcgill.sable.soot.Type) r4;
        i1 = r0.sizeOfType(r5);
        i0 = i0 + i1;

     label1:
        i2 = r3.hasNext();
        if i2 != 0 goto label0;

        return i0;
    }

    java.lang.String jasminDescriptorOf(ca.mcgill.sable.soot.Type)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.Type r1;
        ca.mcgill.sable.soot.jimple.JasminClass$1 r2;
        java.lang.Object r3;
        java.lang.String r4;

        r0 := @this;
        r1 := @parameter0;
        r2 = new ca.mcgill.sable.soot.jimple.JasminClass$1;
        specialinvoke r2.<init>(r0);
        r1.apply(r2);
        r3 = r2.getResult();
        r4 = (java.lang.String) r3;
        return r4;
    }

    java.lang.String jasminDescriptorOf(ca.mcgill.sable.soot.SootMethod)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.SootMethod r1;
        java.lang.StringBuffer r2, r3, r9, r10, r13;
        ca.mcgill.sable.util.List r4;
        ca.mcgill.sable.util.Iterator r5;
        java.lang.Object r6;
        ca.mcgill.sable.soot.Type r7, r11;
        java.lang.String r8, r12, r14;
        int i0;

        r0 := @this;
        r1 := @parameter0;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>();
        r3 = r2.append("(");
        r4 = r1.getParameterTypes();
        r5 = r4.iterator();
        goto label1;

     label0:
        r6 = r5.next();
        r7 = (ca.mcgill.sable.soot.Type) r6;
        r8 = r0.jasminDescriptorOf(r7);
        r9 = r2.append(r8);

     label1:
        i0 = r5.hasNext();
        if i0 != 0 goto label0;

        r10 = r2.append(")");
        r11 = r1.getReturnType();
        r12 = r0.jasminDescriptorOf(r11);
        r13 = r2.append(r12);
        r14 = r2.toString();
        return r14;
    }

    void emit(java.lang.String)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        java.lang.String r1;

        r0 := @this;
        r1 := @parameter0;
        r0.okayEmit(r1);
        return;
    }

    void okayEmit(java.lang.String)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        java.lang.String r1, r5;
        int i0, i1, i2, i3;
        ca.mcgill.sable.util.List r2, r6;
        java.lang.StringBuffer r3, r4;

        r0 := @this;
        r1 := @parameter0;
        i0 = r0.isEmittingMethodCode;
        if i0 == 0 goto label0;

        i1 = r1.endsWith(":");
        if i1 != 0 goto label0;

        r2 = r0.code;
        r3 = new java.lang.StringBuffer;
        specialinvoke r3.<init>("    ");
        r4 = r3.append(r1);
        r5 = r4.toString();
        i2 = r2.add(r5);
        return;

     label0:
        r6 = r0.code;
        i3 = r6.add(r1);
        return;
    }

    void emit(java.lang.String, int)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        java.lang.String r1;
        int i0;

        r0 := @this;
        r1 := @parameter0;
        i0 := @parameter1;
        r0.modifyStackHeight(i0);
        r0.okayEmit(r1);
        return;
    }

    void modifyStackHeight(int)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        int i0, i1, i2, i3, i4;
        java.lang.RuntimeException r1;

        r0 := @this;
        i0 := @parameter0;
        i1 = r0.currentStackHeight;
        r0.currentStackHeight = i1 + i0;
        i2 = r0.currentStackHeight;
        if i2 >= 0 goto label0;

        r1 = new java.lang.RuntimeException;
        specialinvoke r1.<init>("Stack height is negative!");
        throw r1;

     label0:
        i3 = r0.currentStackHeight;
        i4 = r0.maxStackHeight;
        if i3 <= i4 goto label1;

        r0.maxStackHeight = r0.currentStackHeight;

     label1:
        return;
    }

    public void <init>(ca.mcgill.sable.soot.SootClass, ca.mcgill.sable.soot.BodyExpr)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.SootClass r1, r21, r34;
        ca.mcgill.sable.soot.BodyExpr r2;
        ca.mcgill.sable.util.LinkedList r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9;
        java.lang.StringBuffer r4, r6, r7, r10, r12, r14, r15, r18, r20, r24, r26, r29, r35, r38, r44, r46, r47, r48, r50, r51, r52, r55;
        java.lang.String r5, r8, r9, r11, r13, r16, r17, r19, r22, r23, r25, r27, r28, r30, r36, r37, r39, r45, r49, r54, r56;
        ca.mcgill.sable.util.List r31, r40, r57;
        ca.mcgill.sable.util.Iterator r32, r41, r58;
        java.lang.Object r33, r42, r59;
        ca.mcgill.sable.soot.SootField r43;
        ca.mcgill.sable.soot.Type r53;
        ca.mcgill.sable.soot.SootMethod r60;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        specialinvoke r0.<init>();
        r3 = new ca.mcgill.sable.util.LinkedList;
        specialinvoke r3.<init>();
        r0.code = r3;
        i0 = r1.getModifiers();
        i1 = ca.mcgill.sable.soot.Modifier.isInterface(i0);
        if i1 == 0 goto label0;

        i2 = i0 + -512;
        r4 = new java.lang.StringBuffer;
        specialinvoke r4.<init>(".interface ");
        r5 = ca.mcgill.sable.soot.Modifier.toString(i2);
        r6 = r4.append(r5);
        r7 = r6.append(" ");
        r8 = r1.getName();
        r9 = r0.slashify(r8);
        r10 = r7.append(r9);
        r11 = r10.toString();
        r0.emit(r11);
        goto label1;

     label0:
        r12 = new java.lang.StringBuffer;
        specialinvoke r12.<init>(".class ");
        r13 = ca.mcgill.sable.soot.Modifier.toString(i0);
        r14 = r12.append(r13);
        r15 = r14.append(" ");
        r16 = r1.getName();
        r17 = r0.slashify(r16);
        r18 = r15.append(r17);
        r19 = r18.toString();
        r0.emit(r19);

     label1:
        i3 = r1.hasSuperClass();
        if i3 == 0 goto label2;

        r20 = new java.lang.StringBuffer;
        specialinvoke r20.<init>(".super ");
        r21 = r1.getSuperClass();
        r22 = r21.getName();
        r23 = r0.slashify(r22);
        r24 = r20.append(r23);
        r25 = r24.toString();
        r0.emit(r25);
        goto label3;

     label2:
        r26 = new java.lang.StringBuffer;
        specialinvoke r26.<init>(".super ");
        r27 = r1.getName();
        r28 = r0.slashify(r27);
        r29 = r26.append(r28);
        r30 = r29.toString();
        r0.emit(r30);

     label3:
        r0.emit("");
        r31 = r1.getInterfaces();
        r32 = r31.iterator();
        goto label5;

     label4:
        r33 = r32.next();
        r34 = (ca.mcgill.sable.soot.SootClass) r33;
        r35 = new java.lang.StringBuffer;
        specialinvoke r35.<init>(".implements ");
        r36 = r34.getName();
        r37 = r0.slashify(r36);
        r38 = r35.append(r37);
        r39 = r38.toString();
        r0.emit(r39);

     label5:
        i4 = r32.hasNext();
        if i4 != 0 goto label4;

        i5 = r1.getInterfaceCount();
        if i5 == 0 goto label6;

        r0.emit("");

     label6:
        r40 = r1.getFields();
        r41 = r40.iterator();
        goto label8;

     label7:
        r42 = r41.next();
        r43 = (ca.mcgill.sable.soot.SootField) r42;
        r44 = new java.lang.StringBuffer;
        specialinvoke r44.<init>(".field ");
        i6 = r43.getModifiers();
        r45 = ca.mcgill.sable.soot.Modifier.toString(i6);
        r46 = r44.append(r45);
        r47 = r46.append(" ");
        r48 = r47.append(""");
        r49 = r43.getName();
        r50 = r48.append(r49);
        r51 = r50.append(""");
        r52 = r51.append(" ");
        r53 = r43.getType();
        r54 = r0.jasminDescriptorOf(r53);
        r55 = r52.append(r54);
        r56 = r55.toString();
        r0.emit(r56);

     label8:
        i7 = r41.hasNext();
        if i7 != 0 goto label7;

        i8 = r1.getFieldCount();
        if i8 == 0 goto label9;

        r0.emit("");

     label9:
        r57 = r1.getMethods();
        r58 = r57.iterator();
        goto label11;

     label10:
        r59 = r58.next();
        r60 = (ca.mcgill.sable.soot.SootMethod) r59;
        r0.emitMethod(r60, r2);
        r0.emit("");

     label11:
        i9 = r58.hasNext();
        if i9 != 0 goto label10;

        return;
    }

    void assignColorsToLocals(ca.mcgill.sable.soot.jimple.StmtBody)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.jimple.StmtBody r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        java.lang.StringBuffer r2, r7, r8;
        java.lang.Object r3, r16, r20, r24, r27, r35, r37, r41, r44;
        java.io.PrintStream r4;
        ca.mcgill.sable.soot.SootMethod r5;
        java.lang.String r6, r9;
        ca.mcgill.sable.soot.Timer r10, r48;
        ca.mcgill.sable.util.HashMap r11, r12, r13;
        ca.mcgill.sable.util.List r14;
        ca.mcgill.sable.util.Iterator r15, r26;
        ca.mcgill.sable.soot.jimple.Local r17, r33;
        ca.mcgill.sable.soot.Type r18;
        ca.mcgill.sable.util.Map r19, r21, r22, r34, r36, r39, r42, r45, r46, r47;
        java.lang.Integer r23, r38, r40, r43;
        ca.mcgill.sable.soot.jimple.StmtList r25;
        ca.mcgill.sable.soot.jimple.Stmt r28;
        ca.mcgill.sable.soot.jimple.IdentityStmt r29, r31;
        ca.mcgill.sable.soot.jimple.Value r30, r32;

        r0 := @this;
        r1 := @parameter0;
        i0 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i0 == 0 goto label0;

        r4 = java.lang.System.out;
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<init>("[");
        r5 = r1.getMethod();
        r6 = r5.getName();
        r7 = r2.append(r6);
        r8 = r7.append("] Assigning colors to locals...");
        r9 = r8.toString();
        r4.println(r9);

     label0:
        i1 = ca.mcgill.sable.soot.jimple.Main.isProfilingOptimization;
        if i1 == 0 goto label1;

        r10 = ca.mcgill.sable.soot.jimple.Main.packTimer;
        r10.start();

     label1:
        r11 = new ca.mcgill.sable.util.HashMap;
        i2 = r1.getLocalCount();
        i3 = i2 * 2;
        i4 = i3 + 1;
        specialinvoke r11.<init>(i4, 0.7F);
        r0.localToGroup = r11;
        r12 = new ca.mcgill.sable.util.HashMap;
        i5 = r1.getLocalCount();
        i6 = i5 * 2;
        i7 = i6 + 1;
        specialinvoke r12.<init>(i7, 0.7F);
        r0.groupToColorCount = r12;
        r13 = new ca.mcgill.sable.util.HashMap;
        i8 = r1.getLocalCount();
        i9 = i8 * 2;
        i10 = i9 + 1;
        specialinvoke r13.<init>(i10, 0.7F);
        r0.localToColor = r13;
        r14 = r1.getLocals();
        r15 = r14.iterator();
        goto label5;

     label2:
        r16 = r15.next();
        r17 = (ca.mcgill.sable.soot.jimple.Local) r16;
        r18 = r17.getType();
        i11 = r0.sizeOfType(r18);
        if i11 != 1 goto label3;

        r3 = ca.mcgill.sable.soot.IntType.v();
        goto label4;

     label3:
        r3 = ca.mcgill.sable.soot.LongType.v();

     label4:
        r19 = r0.localToGroup;
        r20 = r19.put(r17, r3);
        r21 = r0.groupToColorCount;
        i12 = r21.containsKey(r3);
        if i12 != 0 goto label5;

        r22 = r0.groupToColorCount;
        r23 = new java.lang.Integer;
        specialinvoke r23.<init>(0);
        r24 = r22.put(r3, r23);

     label5:
        i13 = r15.hasNext();
        if i13 != 0 goto label2;

        r25 = r1.getStmtList();
        r26 = r25.iterator();
        goto label7;

     label6:
        r27 = r26.next();
        r28 = (ca.mcgill.sable.soot.jimple.Stmt) r27;
        i14 = r28 instanceof ca.mcgill.sable.soot.jimple.IdentityStmt;
        if i14 == 0 goto label7;

        r29 = (ca.mcgill.sable.soot.jimple.IdentityStmt) r28;
        r30 = r29.getLeftOp();
        i15 = r30 instanceof ca.mcgill.sable.soot.jimple.Local;
        if i15 == 0 goto label7;

        r31 = (ca.mcgill.sable.soot.jimple.IdentityStmt) r28;
        r32 = r31.getLeftOp();
        r33 = (ca.mcgill.sable.soot.jimple.Local) r32;
        r34 = r0.localToGroup;
        r35 = r34.get(r33);
        r36 = r0.groupToColorCount;
        r37 = r36.get(r35);
        r38 = (java.lang.Integer) r37;
        i16 = r38.intValue();
        r39 = r0.localToColor;
        r40 = new java.lang.Integer;
        specialinvoke r40.<init>(i16);
        r41 = r39.put(r33, r40);
        i17 = i16 + 1;
        r42 = r0.groupToColorCount;
        r43 = new java.lang.Integer;
        specialinvoke r43.<init>(i17);
        r44 = r42.put(r35, r43);

     label7:
        i18 = r26.hasNext();
        if i18 != 0 goto label6;

        r45 = r0.localToGroup;
        r46 = r0.localToColor;
        r47 = r0.groupToColorCount;
        ca.mcgill.sable.soot.jimple.FastColorer.assignColorsToLocals(r1, r45, r46, r47);
        i19 = ca.mcgill.sable.soot.jimple.Main.isProfilingOptimization;
        if i19 == 0 goto label8;

        r48 = ca.mcgill.sable.soot.jimple.Main.packTimer;
        r48.end();

     label8:
        return;
    }

    void emitMethod(ca.mcgill.sable.soot.SootMethod, ca.mcgill.sable.soot.BodyExpr)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.SootMethod r1, r8;
        ca.mcgill.sable.soot.BodyExpr r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65;
        ca.mcgill.sable.soot.Body r3;
        ca.mcgill.sable.soot.jimple.StmtBody r4;
        ca.mcgill.sable.soot.jimple.StmtList r5;
        java.io.PrintStream r6;
        java.lang.StringBuffer r7, r10, r11, r16, r18, r19, r21, r23, r35, r36, r45, r49, r50, r54, r55, r59, r60, r64, r116, r117, r123, r127, r131, r135, r168, r169, r170, r171, r176, r177, r178, r179, r182, r183;
        java.lang.String r9, r12, r17, r20, r22, r24, r37, r47, r48, r65, r118, r126, r128, r136, r172, r180, r184;
        ca.mcgill.sable.soot.jimple.CompleteStmtGraph r13;
        ca.mcgill.sable.soot.jimple.SimpleLocalDefs r14;
        ca.mcgill.sable.soot.jimple.SimpleLocalUses r15;
        ca.mcgill.sable.util.HashMap r25, r28, r68, r69;
        ca.mcgill.sable.util.List r26, r39, r70, r97, r115, r138, r142, r149, r159, r161, r163, r181;
        ca.mcgill.sable.util.Iterator r27, r40, r73, r98, r119, r150;
        java.lang.Object r29, r38, r41, r53, r58, r63, r71, r74, r88, r90, r93, r96, r99, r103, r105, r107, r111, r114, r120, r125, r134, r139, r143, r151, r173, r174, r185;
        ca.mcgill.sable.soot.jimple.StmtBox r30;
        ca.mcgill.sable.util.Map r31, r33, r51, r56, r61, r87, r89, r94, r102, r104, r112, r122, r124, r129, r132;
        ca.mcgill.sable.soot.jimple.Unit r32, r34, r43, r44, r52, r57, r62;
        ca.mcgill.sable.soot.jimple.Trap r42;
        ca.mcgill.sable.soot.SootClass r46;
        int[] r66;
        ca.mcgill.sable.util.HashSet r67;
        ca.mcgill.sable.soot.Type r72, r109, r164;
        ca.mcgill.sable.soot.jimple.Stmt r75, r121, r140, r144;
        ca.mcgill.sable.soot.jimple.IdentityStmt r76, r78, r81;
        ca.mcgill.sable.soot.jimple.Value r77, r79, r82, r133, r145, r146, r147, r148, r153, r154, r156, r157;
        ca.mcgill.sable.soot.jimple.Local r80, r100, r160, r162, r166;
        ca.mcgill.sable.soot.jimple.IdentityRef r83;
        java.lang.RuntimeException r84, r167, r175;
        ca.mcgill.sable.soot.jimple.ParameterRef r85;
        ca.mcgill.sable.soot.jimple.GroupIntPair r86, r101;
        java.lang.Integer r91, r92, r95, r106, r108, r110, r113;
        ca.mcgill.sable.soot.jimple.AssignStmt r130, r137, r141;
        ca.mcgill.sable.soot.jimple.ValueBox r152;
        ca.mcgill.sable.soot.jimple.AddExpr r155;
        ca.mcgill.sable.soot.jimple.IntConstant r158;
        ca.mcgill.sable.soot.IntType r165;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r3 = r2.resolveFor(r1);
        r4 = (ca.mcgill.sable.soot.jimple.StmtBody) r3;
        r5 = r4.getStmtList();
        i3 = ca.mcgill.sable.soot.jimple.Main.isVerbose;
        if i3 == 0 goto label0;

        r6 = java.lang.System.out;
        r7 = new java.lang.StringBuffer;
        specialinvoke r7.<init>("[");
        r8 = r4.getMethod();
        r9 = r8.getName();
        r10 = r7.append(r9);
        r11 = r10.append("] Performing peephole optimizations...");
        r12 = r11.toString();
        r6.println(r12);

     label0:
        r13 = new ca.mcgill.sable.soot.jimple.CompleteStmtGraph;
        specialinvoke r13.<init>(r5);
        r14 = new ca.mcgill.sable.soot.jimple.SimpleLocalDefs;
        specialinvoke r14.<init>(r13);
        r15 = new ca.mcgill.sable.soot.jimple.SimpleLocalUses;
        specialinvoke r15.<init>(r13, r14);
        r16 = new java.lang.StringBuffer;
        specialinvoke r16.<init>(".method ");
        i4 = r1.getModifiers();
        r17 = ca.mcgill.sable.soot.Modifier.toString(i4);
        r18 = r16.append(r17);
        r19 = r18.append(" ");
        r20 = r1.getName();
        r21 = r19.append(r20);
        r22 = r0.jasminDescriptorOf(r1);
        r23 = r21.append(r22);
        r24 = r23.toString();
        r0.emit(r24);
        r25 = new ca.mcgill.sable.util.HashMap;
        specialinvoke r25.<init>(10, 0.7F);
        r0.subroutineToReturnAddressSlot = r25;
        r26 = r4.getUnitBoxes();
        r27 = r26.iterator();
        r28 = new ca.mcgill.sable.util.HashMap;
        i5 = r5.size();
        i6 = i5 * 2;
        i7 = i6 + 1;
        specialinvoke r28.<init>(i7, 0.7F);
        r0.stmtToLabel = r28;
        r0.labelCount = 0;
        goto label2;

     label1:
        r29 = r27.next();
        r30 = (ca.mcgill.sable.soot.jimple.StmtBox) r29;
        r31 = r0.stmtToLabel;
        r32 = r30.getUnit();
        i8 = r31.containsKey(r32);
        if i8 != 0 goto label2;

        r33 = r0.stmtToLabel;
        r34 = r30.getUnit();
        r35 = new java.lang.StringBuffer;
        specialinvoke r35.<init>("label");
        i9 = r0.labelCount;
        r0.labelCount = i9 + 1;
        r36 = r35.append(i9);
        r37 = r36.toString();
        r38 = r33.put(r34, r37);

     label2:
        i10 = r27.hasNext();
        if i10 != 0 goto label1;

        r39 = r4.getTraps();
        r40 = r39.iterator();
        goto label4;

     label3:
        r41 = r40.next();
        r42 = (ca.mcgill.sable.soot.jimple.Trap) r41;
        r43 = r42.getBeginUnit();
        r44 = r42.getEndUnit();
        if r43 == r44 goto label4;

        r45 = new java.lang.StringBuffer;
        specialinvoke r45.<init>(".catch ");
        r46 = r42.getException();
        r47 = r46.getName();
        r48 = r0.slashify(r47);
        r49 = r45.append(r48);
        r50 = r49.append(" from ");
        r51 = r0.stmtToLabel;
        r52 = r42.getBeginUnit();
        r53 = r51.get(r52);
        r54 = r50.append(r53);
        r55 = r54.append(" to ");
        r56 = r0.stmtToLabel;
        r57 = r42.getEndUnit();
        r58 = r56.get(r57);
        r59 = r55.append(r58);
        r60 = r59.append(" using ");
        r61 = r0.stmtToLabel;
        r62 = r42.getHandlerUnit();
        r63 = r61.get(r62);
        r64 = r60.append(r63);
        r65 = r64.toString();
        r0.emit(r65);

     label4:
        i11 = r40.hasNext();
        if i11 != 0 goto label3;

        i12 = 0;
        i13 = r1.getParameterCount();
        r66 = new int[i13];
        i0 = 0;
        r67 = new ca.mcgill.sable.util.HashSet;
        specialinvoke r67.<init>();
        r68 = new ca.mcgill.sable.util.HashMap;
        i14 = r4.getLocalCount();
        i15 = i14 * 2;
        i16 = i15 + 1;
        specialinvoke r68.<init>(i16, 0.7F);
        r69 = new ca.mcgill.sable.util.HashMap;
        i17 = r4.getLocalCount();
        i18 = i17 * 2;
        i19 = i18 + 1;
        specialinvoke r69.<init>(i19, 0.7F);
        r0.localToSlot = r69;
        r0.assignColorsToLocals(r4);
        r70 = r1.getParameterTypes();
        i20 = r1.isStatic();
        if i20 != 0 goto label5;

        i0 = 0;
        i12 = 0 + 1;

     label5:
        i1 = 0;
        goto label7;

     label6:
        r66[i1] = i12;
        r71 = r70.get(i1);
        r72 = (ca.mcgill.sable.soot.Type) r71;
        i21 = r0.sizeOfType(r72);
        i12 = i12 + i21;
        i1 = i1 + 1;

     label7:
        i22 = r70.size();
        if i1 < i22 goto label6;

        r73 = r5.iterator();
        goto label12;

     label8:
        r74 = r73.next();
        r75 = (ca.mcgill.sable.soot.jimple.Stmt) r74;
        i23 = r75 instanceof ca.mcgill.sable.soot.jimple.IdentityStmt;
        if i23 == 0 goto label12;

        r76 = (ca.mcgill.sable.soot.jimple.IdentityStmt) r75;
        r77 = r76.getLeftOp();
        i24 = r77 instanceof ca.mcgill.sable.soot.jimple.Local;
        if i24 == 0 goto label12;

        r78 = (ca.mcgill.sable.soot.jimple.IdentityStmt) r75;
        r79 = r78.getLeftOp();
        r80 = (ca.mcgill.sable.soot.jimple.Local) r79;
        r81 = (ca.mcgill.sable.soot.jimple.IdentityStmt) r75;
        r82 = r81.getRightOp();
        r83 = (ca.mcgill.sable.soot.jimple.IdentityRef) r82;
        i25 = r83 instanceof ca.mcgill.sable.soot.jimple.ThisRef;
        if i25 == 0 goto label10;

        i26 = r1.isStatic();
        if i26 == 0 goto label9;

        r84 = new java.lang.RuntimeException;
        specialinvoke r84.<init>("Attempting to use 'this' in static method");
        throw r84;

     label9:
        i27 = i0;
        goto label11;

     label10:
        i28 = r83 instanceof ca.mcgill.sable.soot.jimple.ParameterRef;
        if i28 == 0 goto label12;

        r85 = (ca.mcgill.sable.soot.jimple.ParameterRef) r83;
        i29 = r85.getIndex();
        i27 = r66[i29];
        goto label11;

     label11:
        r86 = new ca.mcgill.sable.soot.jimple.GroupIntPair;
        r87 = r0.localToGroup;
        r88 = r87.get(r80);
        r89 = r0.localToColor;
        r90 = r89.get(r80);
        r91 = (java.lang.Integer) r90;
        i30 = r91.intValue();
        specialinvoke r86.<init>(r88, i30);
        r92 = new java.lang.Integer;
        specialinvoke r92.<init>(i27);
        r93 = r68.put(r86, r92);
        r94 = r0.localToSlot;
        r95 = new java.lang.Integer;
        specialinvoke r95.<init>(i27);
        r96 = r94.put(r80, r95);
        i31 = r67.add(r80);

     label12:
        i32 = r73.hasNext();
        if i32 != 0 goto label8;

        r97 = r4.getLocals();
        r98 = r97.iterator();
        goto label16;

     label13:
        r99 = r98.next();
        r100 = (ca.mcgill.sable.soot.jimple.Local) r99;
        i33 = r67.contains(r100);
        if i33 != 0 goto label16;

        r101 = new ca.mcgill.sable.soot.jimple.GroupIntPair;
        r102 = r0.localToGroup;
        r103 = r102.get(r100);
        r104 = r0.localToColor;
        r105 = r104.get(r100);
        r106 = (java.lang.Integer) r105;
        i34 = r106.intValue();
        specialinvoke r101.<init>(r103, i34);
        i35 = r68.containsKey(r101);
        if i35 == 0 goto label14;

        r107 = r68.get(r101);
        r108 = (java.lang.Integer) r107;
        i36 = r108.intValue();
        goto label15;

     label14:
        i36 = i12;
        r109 = r100.getType();
        i37 = r0.sizeOfType(r109);
        i12 = i12 + i37;
        r110 = new java.lang.Integer;
        specialinvoke r110.<init>(i36);
        r111 = r68.put(r101, r110);

     label15:
        r112 = r0.localToSlot;
        r113 = new java.lang.Integer;
        specialinvoke r113.<init>(i36);
        r114 = r112.put(r100, r113);
        i38 = r67.add(r100);

     label16:
        i39 = r98.hasNext();
        if i39 != 0 goto label13;

        r0.emit("    .limit stack ?");
        r115 = r0.code;
        i40 = r115.size();
        i41 = i40 - 1;
        r116 = new java.lang.StringBuffer;
        specialinvoke r116.<init>("    .limit locals ");
        r117 = r116.append(i12);
        r118 = r117.toString();
        r0.emit(r118);
        r119 = r5.iterator();
        r0.isEmittingMethodCode = 1;
        r0.maxStackHeight = 0;
        r0.isNextGotoAJsr = 0;
        goto label30;

     label17:
        r120 = r119.next();
        r121 = (ca.mcgill.sable.soot.jimple.Stmt) r120;
        r122 = r0.stmtToLabel;
        i42 = r122.containsKey(r121);
        if i42 == 0 goto label18;

        r123 = new java.lang.StringBuffer;
        r124 = r0.stmtToLabel;
        r125 = r124.get(r121);
        r126 = java.lang.String.valueOf(r125);
        specialinvoke r123.<init>(r126);
        r127 = r123.append(":");
        r128 = r127.toString();
        r0.emit(r128);

     label18:
        r129 = r0.subroutineToReturnAddressSlot;
        i43 = r129.containsKey(r121);
        if i43 == 0 goto label19;

        r130 = (ca.mcgill.sable.soot.jimple.AssignStmt) r121;
        r0.modifyStackHeight(1);
        r131 = new java.lang.StringBuffer;
        specialinvoke r131.<init>("astore ");
        r132 = r0.localToSlot;
        r133 = r130.getLeftOp();
        r134 = r132.get(r133);
        r135 = r131.append(r134);
        r136 = r135.toString();
        r0.emit(r136, -1);

     label19:
        i44 = 0;
        i45 = r121 instanceof ca.mcgill.sable.soot.jimple.AssignStmt;
        if i45 == 0 goto label29;

        r137 = (ca.mcgill.sable.soot.jimple.AssignStmt) r121;
        i46 = r119.hasNext();
        if i46 == 0 goto label29;

        r138 = r13.getSuccsOf(r137);
        r139 = r138.get(0);
        r140 = (ca.mcgill.sable.soot.jimple.Stmt) r139;
        i47 = r140 instanceof ca.mcgill.sable.soot.jimple.AssignStmt;
        if i47 == 0 goto label29;

        r141 = (ca.mcgill.sable.soot.jimple.AssignStmt) r140;
        r142 = r13.getSuccsOf(r141);
        i48 = r142.size();
        if i48 != 1 goto label29;

        r143 = r142.get(0);
        r144 = (ca.mcgill.sable.soot.jimple.Stmt) r143;
        r145 = r137.getLeftOp();
        r146 = r137.getRightOp();
        i49 = r145 instanceof ca.mcgill.sable.soot.jimple.Local;
        if i49 == 0 goto label29;

        i50 = r145 instanceof ca.mcgill.sable.soot.jimple.Local;
        if i50 == 0 goto label29;

        r147 = r141.getLeftOp();
        i51 = r147.equals(r146);
        if i51 == 0 goto label29;

        r148 = r141.getRightOp();
        i52 = r148 instanceof ca.mcgill.sable.soot.jimple.AddExpr;
        if i52 != 0 goto label20;

        goto label29;

     label20:
        r149 = r144.getUseBoxes();
        r150 = r149.iterator();
        i2 = 0;
        goto label23;

     label21:
        r151 = r150.next();
        r152 = (ca.mcgill.sable.soot.jimple.ValueBox) r151;
        r153 = r152.getValue();
        if r153 != r145 goto label23;

        if i2 != 0 goto label22;

        i2 = 1;
        goto label23;

     label22:
        i2 = 0;
        goto label24;

     label23:
        i53 = r150.hasNext();
        if i53 != 0 goto label21;

     label24:
        if i2 == 0 goto label29;

        r154 = r141.getRightOp();
        r155 = (ca.mcgill.sable.soot.jimple.AddExpr) r154;
        r156 = r155.getOp1();
        i54 = r156.equals(r145);
        if i54 == 0 goto label29;

        r157 = r155.getOp2();
        i55 = r157 instanceof ca.mcgill.sable.soot.jimple.IntConstant;
        if i55 == 0 goto label29;

        r158 = (ca.mcgill.sable.soot.jimple.IntConstant) r157;
        i56 = r158.value;
        if i56 == 1 goto label25;

        goto label29;

     label25:
        r159 = r15.getUsesOf(r137);
        i57 = r159.size();
        if i57 != 2 goto label29;

        r160 = (ca.mcgill.sable.soot.jimple.Local) r145;
        r161 = r14.getDefsOfAt(r160, r141);
        i58 = r161.size();
        if i58 != 1 goto label29;

        r162 = (ca.mcgill.sable.soot.jimple.Local) r145;
        r163 = r14.getDefsOfAt(r162, r144);
        i59 = r163.size();
        if i59 == 1 goto label26;

        goto label29;

     label26:
        r164 = r145.getType();
        r165 = ca.mcgill.sable.soot.IntType.v();
        if r164 != r165 goto label29;

        r0.currentStackHeight = 0;
        r0.plusPlusValue = r146;
        r0.plusPlusHolder = (ca.mcgill.sable.soot.jimple.Local) r145;
        r0.plusPlusIncrementer = r141;
        r0.plusPlusState = 0;
        r0.emitStmt(r144);
        r166 = r0.plusPlusHolder;
        if r166 == null goto label27;

        r0.emitStmt(r137);
        r0.emitStmt(r141);

     label27:
        i60 = r0.currentStackHeight;
        if i60 == 0 goto label28;

        r167 = new java.lang.RuntimeException;
        r168 = new java.lang.StringBuffer;
        specialinvoke r168.<init>("Stack has height ");
        i61 = r0.currentStackHeight;
        r169 = r168.append(i61);
        r170 = r169.append(" after execution of stmt: ");
        r171 = r170.append(r121);
        r172 = r171.toString();
        specialinvoke r167.<init>(r172);
        throw r167;

     label28:
        i44 = 1;
        r173 = r119.next();
        r174 = r119.next();

     label29:
        if i44 != 0 goto label30;

        r0.currentStackHeight = 0;
        r0.emitStmt(r121);
        i62 = r0.currentStackHeight;
        if i62 == 0 goto label30;

        r175 = new java.lang.RuntimeException;
        r176 = new java.lang.StringBuffer;
        specialinvoke r176.<init>("Stack has height ");
        i63 = r0.currentStackHeight;
        r177 = r176.append(i63);
        r178 = r177.append(" after execution of stmt: ");
        r179 = r178.append(r121);
        r180 = r179.toString();
        specialinvoke r175.<init>(r180);
        throw r175;

     label30:
        i64 = r119.hasNext();
        if i64 != 0 goto label17;

        r0.isEmittingMethodCode = 0;
        r181 = r0.code;
        r182 = new java.lang.StringBuffer;
        specialinvoke r182.<init>("    .limit stack ");
        i65 = r0.maxStackHeight;
        r183 = r182.append(i65);
        r184 = r183.toString();
        r185 = r181.set(i41, r184);
        r0.emit(".end method");
        return;
    }

    public void print(java.io.PrintWriter)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        java.io.PrintWriter r1;
        ca.mcgill.sable.util.List r2;
        ca.mcgill.sable.util.Iterator r3;
        java.lang.Object r4;
        int i0;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.code;
        r3 = r2.iterator();
        goto label1;

     label0:
        r4 = r3.next();
        r1.println(r4);

     label1:
        i0 = r3.hasNext();
        if i0 != 0 goto label0;

        return;
    }

    void emitAssignStmt(ca.mcgill.sable.soot.jimple.AssignStmt)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.jimple.AssignStmt r1;
        ca.mcgill.sable.soot.IntType r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11;
        ca.mcgill.sable.soot.jimple.Value r3, r4, r7, r8;
        ca.mcgill.sable.soot.jimple.Local r5;
        ca.mcgill.sable.soot.jimple.BinopExpr r6;
        ca.mcgill.sable.soot.Type r9;
        ca.mcgill.sable.soot.jimple.IntConstant r10, r11;
        java.lang.StringBuffer r12, r16, r17, r18;
        ca.mcgill.sable.util.Map r13;
        java.lang.Object r14;
        java.lang.Integer r15;
        java.lang.String r19;
        ca.mcgill.sable.soot.jimple.JasminClass$2 r20;

        r0 := @this;
        r1 := @parameter0;
        r3 = r1.getLeftOp();
        r4 = r1.getRightOp();
        i2 = r3 instanceof ca.mcgill.sable.soot.jimple.Local;
        if i2 == 0 goto label5;

        i3 = r4 instanceof ca.mcgill.sable.soot.jimple.AddExpr;
        if i3 != 0 goto label0;

        i4 = r4 instanceof ca.mcgill.sable.soot.jimple.SubExpr;
        if i4 == 0 goto label5;

     label0:
        r5 = (ca.mcgill.sable.soot.jimple.Local) r3;
        r6 = (ca.mcgill.sable.soot.jimple.BinopExpr) r4;
        r7 = r6.getOp1();
        r8 = r6.getOp2();
        r9 = r5.getType();
        r2 = ca.mcgill.sable.soot.IntType.v();
        i5 = r9.equals(r2);
        if i5 == 0 goto label5;

        i0 = 0;
        i1 = 0;
        if r7 != r5 goto label1;

        i6 = r8 instanceof ca.mcgill.sable.soot.jimple.IntConstant;
        if i6 == 0 goto label1;

        r10 = (ca.mcgill.sable.soot.jimple.IntConstant) r8;
        i1 = r10.value;
        i0 = 1;
        goto label2;

     label1:
        i7 = r6 instanceof ca.mcgill.sable.soot.jimple.AddExpr;
        if i7 == 0 goto label2;

        if r8 != r5 goto label2;

        i8 = r7 instanceof ca.mcgill.sable.soot.jimple.IntConstant;
        if i8 == 0 goto label2;

        r11 = (ca.mcgill.sable.soot.jimple.IntConstant) r7;
        i1 = r11.value;
        i0 = 1;

     label2:
        if i0 == 0 goto label5;

        if i1 < -32768 goto label5;

        if i1 > 32767 goto label5;

        r12 = new java.lang.StringBuffer;
        specialinvoke r12.<init>("iinc ");
        r13 = r0.localToSlot;
        r14 = r13.get(r5);
        r15 = (java.lang.Integer) r14;
        i9 = r15.intValue();
        r16 = r12.append(i9);
        r17 = r16.append(" ");
        i10 = r6 instanceof ca.mcgill.sable.soot.jimple.AddExpr;
        if i10 == 0 goto label3;

        i11 = i1;
        goto label4;

     label3:
        i11 = -i1;

     label4:
        r18 = r17.append(i11);
        r19 = r18.toString();
        r0.emit(r19, 0);
        return;

     label5:
        r20 = new ca.mcgill.sable.soot.jimple.JasminClass$2;
        specialinvoke r20.<init>(r4, r0);
        r3.apply(r20);
        return;
    }

    void emitIfStmt(ca.mcgill.sable.soot.jimple.IfStmt)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.jimple.IfStmt r1;
        ca.mcgill.sable.soot.jimple.Value r2, r4, r6;
        ca.mcgill.sable.soot.jimple.BinopExpr r3, r5;
        ca.mcgill.sable.util.Map r7;
        ca.mcgill.sable.soot.jimple.Stmt r8;
        java.lang.Object r9;
        java.lang.String r10, r13, r16;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        java.lang.StringBuffer r11, r12, r14, r15;
        java.lang.RuntimeException r17;
        ca.mcgill.sable.soot.jimple.IntConstant r18, r20;
        ca.mcgill.sable.soot.jimple.JasminClass$5 r19;
        ca.mcgill.sable.soot.jimple.JasminClass$6 r21;
        ca.mcgill.sable.soot.jimple.JasminClass$7 r22;

        r0 := @this;
        r1 := @parameter0;
        r2 = r1.getCondition();
        r3 = (ca.mcgill.sable.soot.jimple.BinopExpr) r2;
        r4 = r3.getOp1();
        r5 = (ca.mcgill.sable.soot.jimple.BinopExpr) r2;
        r6 = r5.getOp2();
        r7 = r0.stmtToLabel;
        r8 = r1.getTarget();
        r9 = r7.get(r8);
        r10 = (java.lang.String) r9;
        i0 = r6 instanceof ca.mcgill.sable.soot.jimple.NullConstant;
        if i0 != 0 goto label0;

        i1 = r4 instanceof ca.mcgill.sable.soot.jimple.NullConstant;
        if i1 == 0 goto label5;

     label0:
        i2 = r6 instanceof ca.mcgill.sable.soot.jimple.NullConstant;
        if i2 == 0 goto label1;

        r0.emitValue(r4);
        goto label2;

     label1:
        r0.emitValue(r6);

     label2:
        i3 = r2 instanceof ca.mcgill.sable.soot.jimple.EqExpr;
        if i3 == 0 goto label3;

        r11 = new java.lang.StringBuffer;
        specialinvoke r11.<init>("ifnull ");
        r12 = r11.append(r10);
        r13 = r12.toString();
        r0.emit(r13, -1);
        return;

     label3:
        i4 = r2 instanceof ca.mcgill.sable.soot.jimple.NeExpr;
        if i4 == 0 goto label4;

        r14 = new java.lang.StringBuffer;
        specialinvoke r14.<init>("ifnonnull ");
        r15 = r14.append(r10);
        r16 = r15.toString();
        r0.emit(r16, -1);
        return;

     label4:
        r17 = new java.lang.RuntimeException;
        specialinvoke r17.<init>("invalid condition");
        throw r17;

     label5:
        i5 = r6 instanceof ca.mcgill.sable.soot.jimple.IntConstant;
        if i5 == 0 goto label6;

        r18 = (ca.mcgill.sable.soot.jimple.IntConstant) r6;
        i6 = r18.value;
        if i6 != 0 goto label6;

        r0.emitValue(r4);
        r19 = new ca.mcgill.sable.soot.jimple.JasminClass$5;
        specialinvoke r19.<init>(r10, r0);
        r2.apply(r19);
        return;

     label6:
        i7 = r4 instanceof ca.mcgill.sable.soot.jimple.IntConstant;
        if i7 == 0 goto label7;

        r20 = (ca.mcgill.sable.soot.jimple.IntConstant) r4;
        i8 = r20.value;
        if i8 != 0 goto label7;

        r0.emitValue(r6);
        r21 = new ca.mcgill.sable.soot.jimple.JasminClass$6;
        specialinvoke r21.<init>(r10, r0);
        r2.apply(r21);
        return;

     label7:
        r0.emitValue(r4);
        r0.emitValue(r6);
        r22 = new ca.mcgill.sable.soot.jimple.JasminClass$7;
        specialinvoke r22.<init>(r10, r4, r0);
        r2.apply(r22);
        return;
    }

    void emitStmt(ca.mcgill.sable.soot.jimple.Stmt)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.jimple.Stmt r1;
        ca.mcgill.sable.soot.jimple.JasminClass$14 r2;

        r0 := @this;
        r1 := @parameter0;
        r2 = new ca.mcgill.sable.soot.jimple.JasminClass$14;
        specialinvoke r2.<init>(r0);
        r1.apply(r2);
        return;
    }

    void emitLocal(ca.mcgill.sable.soot.jimple.Local)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.jimple.Local r1;
        ca.mcgill.sable.util.Map r2;
        java.lang.Object r3;
        java.lang.Integer r4;
        int i0;
        ca.mcgill.sable.soot.Type r5;
        ca.mcgill.sable.soot.jimple.JasminClass$16 r6;

        r0 := @this;
        r1 := @parameter0;
        r2 = r0.localToSlot;
        r3 = r2.get(r1);
        r4 = (java.lang.Integer) r3;
        i0 = r4.intValue();
        r5 = r1.getType();
        r6 = new ca.mcgill.sable.soot.jimple.JasminClass$16;
        specialinvoke r6.<init>(i0, r0, r1);
        r5.apply(r6);
        return;
    }

    void emitValue(ca.mcgill.sable.soot.jimple.Value)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        ca.mcgill.sable.soot.jimple.Value r1;
        ca.mcgill.sable.soot.jimple.JasminClass$17 r2;

        r0 := @this;
        r1 := @parameter0;
        r2 = new ca.mcgill.sable.soot.jimple.JasminClass$17;
        specialinvoke r2.<init>(r0);
        r1.apply(r2);
        return;
    }

    public void emitBooleanBranch(java.lang.String)
    {
        ca.mcgill.sable.soot.jimple.JasminClass r0;
        java.lang.String r1, r3, r6, r10, r14, r18;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.StringBuffer r2, r4, r5, r7, r8, r9, r11, r12, r13, r15, r16, r17;

        r0 := @this;
        r1 := @parameter0;
        i1 = r1.indexOf("icmp");
        if i1 != -1 goto label0;

        i2 = r1.indexOf("acmp");
        if i2 == -1 goto label1;

     label0:
        i0 = -2;
        goto label2;

     label1:
        i0 = -1;

     label2:
        r2 = new java.lang.StringBuffer;
        r3 = java.lang.String.valueOf(r1);
        specialinvoke r2.<init>(r3);
        r4 = r2.append(" label");
        i3 = r0.labelCount;
        r5 = r4.append(i3);
        r6 = r5.toString();
        r0.emit(r6, i0);
        r0.emit("iconst_0", 1);
        r7 = new java.lang.StringBuffer;
        specialinvoke r7.<init>("goto label");
        i4 = r0.labelCount;
        r8 = r7.append(i4);
        r9 = r8.append(1);
        r10 = r9.toString();
        r0.emit(r10, 0);
        r11 = new java.lang.StringBuffer;
        specialinvoke r11.<init>("label");
        i5 = r0.labelCount;
        r0.labelCount = i5 + 1;
        r12 = r11.append(i5);
        r13 = r12.append(":");
        r14 = r13.toString();
        r0.emit(r14);
        r0.emit("iconst_1", 1);
        r15 = new java.lang.StringBuffer;
        specialinvoke r15.<init>("label");
        i6 = r0.labelCount;
        r0.labelCount = i6 + 1;
        r16 = r15.append(i6);
        r17 = r16.append(":");
        r18 = r17.toString();
        r0.emit(r18);
        return;
    }
}
