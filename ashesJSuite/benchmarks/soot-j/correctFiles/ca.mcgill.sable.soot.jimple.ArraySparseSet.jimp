public class ca.mcgill.sable.soot.jimple.ArraySparseSet extends java.lang.Object implements ca.mcgill.sable.soot.jimple.FlowSet
{
    static final int DEFAULT_SIZE;
    int numElements;
    int maxElements;
    java.lang.Object[] elements;

    public void <init>()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;

        r0 := @this;
        specialinvoke r0.<init>();
        r0.maxElements = 8;
        r0.elements = new java.lang.Object[8];
        r0.numElements = 0;
        return;
    }

    private void <init>(ca.mcgill.sable.soot.jimple.ArraySparseSet)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r1;
        java.lang.Object r2, r3;

        r0 := @this;
        r1 := @parameter0;
        specialinvoke r0.<init>();
        r0.numElements = r1.numElements;
        r0.maxElements = r1.maxElements;
        r2 = r1.elements;
        r3 = r2.clone();
        r0.elements = (java.lang.Object[]) r3;
        return;
    }

    public java.lang.Object clone()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r1;

        r0 := @this;
        r1 = new ca.mcgill.sable.soot.jimple.ArraySparseSet;
        specialinvoke r1.<init>(r0);
        return r1;
    }

    public void clear()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;

        r0 := @this;
        r0.numElements = 0;
        return;
    }

    public int size()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        int i0;

        r0 := @this;
        i0 = r0.numElements;
        return i0;
    }

    public boolean isEmpty()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        int i0;

        r0 := @this;
        i0 = r0.numElements;
        if i0 == 0 goto label0;

        return 0;

     label0:
        return 1;
    }

    public ca.mcgill.sable.util.List toList()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        ca.mcgill.sable.soot.jimple.ArraySparseSet$SparseArrayList r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this;
        r1 = new ca.mcgill.sable.soot.jimple.ArraySparseSet$SparseArrayList;
        r2 = r0.elements;
        i0 = r0.numElements;
        specialinvoke r1.<init>(r2, i0);
        return r1;
    }

    public void add(java.lang.Object)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        java.lang.Object r1;
        int i0, i1, i2, i3;
        java.lang.Object[] r2;

        r0 := @this;
        r1 := @parameter0;
        i0 = r0.numElements;
        i1 = r0.maxElements;
        if i0 != i1 goto label0;

        specialinvoke r0.doubleCapacity();

     label0:
        i2 = r0.contains(r1);
        if i2 != 0 goto label1;

        r2 = r0.elements;
        i3 = r0.numElements;
        r0.numElements = i3 + 1;
        r2[i3] = r1;

     label1:
        return;
    }

    public void add(java.lang.Object, ca.mcgill.sable.soot.jimple.FlowSet)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r3;
        java.lang.Object r1;
        ca.mcgill.sable.soot.jimple.FlowSet r2;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r3 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r2;
        if r0 == r3 goto label0;

        r0.copy(r3);

     label0:
        r3.add(r1);
        return;
    }

    private void doubleCapacity()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        int i0, i1, i2;
        java.lang.Object[] r1;
        java.lang.Object r2;

        r0 := @this;
        i0 = r0.maxElements;
        i1 = i0 * 2;
        r1 = new java.lang.Object[i1];
        r2 = r0.elements;
        i2 = r0.numElements;
        java.lang.System.arraycopy(r2, 0, r1, 0, i2);
        r0.elements = r1;
        r0.maxElements = i1;
        return;
    }

    public void remove(java.lang.Object, ca.mcgill.sable.soot.jimple.FlowSet)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r3;
        java.lang.Object r1, r5;
        ca.mcgill.sable.soot.jimple.FlowSet r2;
        int i0, i1, i2;
        java.lang.Object[] r4;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r3 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r2;
        if r0 == r3 goto label0;

        r0.copy(r3);

     label0:
        i0 = 0;
        goto label3;

     label1:
        r4 = r3.elements;
        r5 = r4[i0];
        i1 = r5.equals(r1);
        if i1 == 0 goto label2;

        specialinvoke r3.removeElementAt(i0);
        return;

     label2:
        i0 = i0 + 1;

     label3:
        i2 = r0.numElements;
        if i0 < i2 goto label1;

        return;
    }

    private void removeElementAt(int)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        java.lang.Object r1, r2;

        r0 := @this;
        i0 := @parameter0;
        i1 = r0.numElements;
        i2 = i1 - 1;
        if i0 != i2 goto label0;

        i3 = r0.numElements;
        r0.numElements = i3 - 1;
        return;

     label0:
        r1 = r0.elements;
        i4 = i0 + 1;
        r2 = r0.elements;
        i5 = r0.numElements;
        i6 = i0 + 1;
        i7 = i5 - i6;
        java.lang.System.arraycopy(r1, i4, r2, i0, i7);
        i8 = r0.numElements;
        r0.numElements = i8 - 1;
        return;
    }

    public void union(ca.mcgill.sable.soot.jimple.FlowSet, ca.mcgill.sable.soot.jimple.FlowSet)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r3, r4;
        ca.mcgill.sable.soot.jimple.FlowSet r1, r2;
        int i0, i1, i2, i3;
        java.lang.Object[] r5, r7;
        java.lang.Object r6, r8;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r3 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r1;
        r4 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r2;
        if r4 != r3 goto label2;

        i0 = 0;
        goto label1;

     label0:
        r5 = r0.elements;
        r6 = r5[i0];
        r4.add(r6);
        i0 = i0 + 1;

     label1:
        i1 = r0.numElements;
        if i0 < i1 goto label0;

        return;

     label2:
        if r0 == r4 goto label3;

        r0.copy(r4);

     label3:
        i2 = 0;
        goto label5;

     label4:
        r7 = r3.elements;
        r8 = r7[i2];
        r4.add(r8);
        i2 = i2 + 1;

     label5:
        i3 = r3.numElements;
        if i2 < i3 goto label4;

        return;
    }

    public void intersection(ca.mcgill.sable.soot.jimple.FlowSet, ca.mcgill.sable.soot.jimple.FlowSet)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r3, r4, r5, r6;
        ca.mcgill.sable.soot.jimple.FlowSet r1, r2;
        int i0, i1, i2;
        java.lang.Object[] r7, r9;
        java.lang.Object r8, r10;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r4 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r1;
        r5 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r2;
        if r5 == r4 goto label0;

        if r5 != r0 goto label1;

     label0:
        r6 = new ca.mcgill.sable.soot.jimple.ArraySparseSet;
        specialinvoke r6.<init>();
        r3 = r6;
        goto label2;

     label1:
        r3 = r5;
        r5.clear();

     label2:
        i0 = 0;
        goto label5;

     label3:
        r7 = r0.elements;
        r8 = r7[i0];
        i1 = r4.contains(r8);
        if i1 == 0 goto label4;

        r9 = r0.elements;
        r10 = r9[i0];
        r3.add(r10);

     label4:
        i0 = i0 + 1;

     label5:
        i2 = r0.numElements;
        if i0 < i2 goto label3;

        if r3 == r5 goto label6;

        r3.copy(r5);

     label6:
        return;
    }

    public void difference(ca.mcgill.sable.soot.jimple.FlowSet, ca.mcgill.sable.soot.jimple.FlowSet)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r3, r4, r5, r6;
        ca.mcgill.sable.soot.jimple.FlowSet r1, r2;
        int i0, i1, i2;
        java.lang.Object[] r7, r9;
        java.lang.Object r8, r10;

        r0 := @this;
        r1 := @parameter0;
        r2 := @parameter1;
        r4 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r1;
        r5 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r2;
        if r5 == r4 goto label0;

        if r5 != r0 goto label1;

     label0:
        r6 = new ca.mcgill.sable.soot.jimple.ArraySparseSet;
        specialinvoke r6.<init>();
        r3 = r6;
        goto label2;

     label1:
        r3 = r5;
        r5.clear();

     label2:
        i0 = 0;
        goto label5;

     label3:
        r7 = r0.elements;
        r8 = r7[i0];
        i1 = r4.contains(r8);
        if i1 != 0 goto label4;

        r9 = r0.elements;
        r10 = r9[i0];
        r3.add(r10);

     label4:
        i0 = i0 + 1;

     label5:
        i2 = r0.numElements;
        if i0 < i2 goto label3;

        if r3 == r5 goto label6;

        r3.copy(r5);

     label6:
        return;
    }

    public boolean contains(java.lang.Object)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        java.lang.Object r1, r3;
        int i0, i1, i2;
        java.lang.Object[] r2;

        r0 := @this;
        r1 := @parameter0;
        i0 = 0;
        goto label2;

     label0:
        r2 = r0.elements;
        r3 = r2[i0];
        i1 = r3.equals(r1);
        if i1 == 0 goto label1;

        return 1;

     label1:
        i0 = i0 + 1;

     label2:
        i2 = r0.numElements;
        if i0 < i2 goto label0;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r2;
        java.lang.Object r1, r4, r6;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.Object[] r3, r5;

        r0 := @this;
        r1 := @parameter0;
        r2 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r1;
        i2 = r2.numElements;
        i3 = r0.numElements;
        if i2 == i3 goto label0;

        return 0;

     label0:
        i4 = r0.numElements;
        i0 = 0;
        goto label3;

     label1:
        r3 = r0.elements;
        r4 = r3[i0];
        i5 = r2.contains(r4);
        if i5 != 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

     label3:
        if i0 < i4 goto label1;

        i1 = 0;
        goto label6;

     label4:
        r5 = r2.elements;
        r6 = r5[i1];
        i6 = r0.contains(r6);
        if i6 != 0 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < i4 goto label4;

        return 1;
    }

    public java.lang.String toString()
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0;
        java.lang.StringBuffer r1, r5, r6, r8, r10, r11;
        ca.mcgill.sable.util.List r2;
        ca.mcgill.sable.util.Iterator r3;
        int i0, i1;
        java.lang.Object r4, r7;
        java.lang.String r9, r12;

        r0 := @this;
        r1 = new java.lang.StringBuffer;
        specialinvoke r1.<init>("{");
        r2 = r0.toList();
        r3 = r2.iterator();
        i0 = r3.hasNext();
        if i0 == 0 goto label2;

        r4 = r3.next();
        r5 = r1.append(r4);
        goto label1;

     label0:
        r6 = new java.lang.StringBuffer;
        specialinvoke r6.<init>(", ");
        r7 = r3.next();
        r8 = r6.append(r7);
        r9 = r8.toString();
        r10 = r1.append(r9);

     label1:
        i1 = r3.hasNext();
        if i1 != 0 goto label0;

     label2:
        r11 = r1.append("}");
        r12 = r1.toString();
        return r12;
    }

    public void copy(ca.mcgill.sable.soot.jimple.FlowSet)
    {
        ca.mcgill.sable.soot.jimple.ArraySparseSet r0, r2;
        ca.mcgill.sable.soot.jimple.FlowSet r1;
        int i0, i1, i2;
        java.lang.Object r3, r4;

        r0 := @this;
        r1 := @parameter0;
        r2 = (ca.mcgill.sable.soot.jimple.ArraySparseSet) r1;
        goto label1;

     label0:
        specialinvoke r2.doubleCapacity();

     label1:
        i0 = r2.maxElements;
        i1 = r0.maxElements;
        if i0 < i1 goto label0;

        r2.numElements = r0.numElements;
        r3 = r0.elements;
        r4 = r2.elements;
        i2 = r0.numElements;
        java.lang.System.arraycopy(r3, 0, r4, 0, i2);
        return;
    }
}
