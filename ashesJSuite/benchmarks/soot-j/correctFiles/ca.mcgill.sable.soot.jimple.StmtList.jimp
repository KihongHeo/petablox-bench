public class ca.mcgill.sable.soot.jimple.StmtList extends ca.mcgill.sable.util.ArrayList
{
    ca.mcgill.sable.soot.jimple.StmtBody body;

    public void <init>(ca.mcgill.sable.soot.jimple.StmtBody)
    {
        ca.mcgill.sable.soot.jimple.StmtList r0;
        ca.mcgill.sable.soot.jimple.StmtBody r1;

        r0 := @this;
        r1 := @parameter0;
        specialinvoke r0.<init>();
        r0.body = r1;
        return;
    }

    public ca.mcgill.sable.soot.jimple.StmtBody getBody()
    {
        ca.mcgill.sable.soot.jimple.StmtList r0;
        ca.mcgill.sable.soot.jimple.StmtBody r1;

        r0 := @this;
        r1 = r0.body;
        return r1;
    }

    public boolean remove(java.lang.Object)
    {
        ca.mcgill.sable.soot.jimple.StmtList r0;
        java.lang.Object r1, r3, r4;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        ca.mcgill.sable.soot.jimple.Stmt r2, r6, r8;
        ca.mcgill.sable.soot.jimple.StmtBody r5, r7;

        r0 := @this;
        r1 := @parameter0;
        i0 = 0;
        i1 = r0.contains(r1);
        if i1 == 0 goto label3;

        i2 = r0.indexOf(r1);
        i3 = i2 + 1;
        i4 = r0.size();
        if i3 >= i4 goto label0;

        i5 = i2 + 1;
        r3 = r0.get(i5);
        r2 = (ca.mcgill.sable.soot.jimple.Stmt) r3;
        goto label2;

     label0:
        i6 = r0.size();
        if i6 < 2 goto label1;

        i7 = i2 - 1;
        r4 = r0.get(i7);
        r2 = (ca.mcgill.sable.soot.jimple.Stmt) r4;
        goto label2;

     label1:
        r2 = null;

     label2:
        i0 = specialinvoke r0.remove(r1);
        r5 = r0.body;
        r6 = (ca.mcgill.sable.soot.jimple.Stmt) r1;
        r5.redirectJumps(r6, r2);
        r7 = r0.body;
        r8 = (ca.mcgill.sable.soot.jimple.Stmt) r1;
        r7.eliminateBackPointersTo(r8);

     label3:
        return i0;
    }

    public java.lang.Object remove(int)
    {
        ca.mcgill.sable.soot.jimple.StmtList r0;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.Object r1, r3, r4, r5;
        ca.mcgill.sable.soot.jimple.Stmt r2, r7, r9;
        ca.mcgill.sable.soot.jimple.StmtBody r6, r8;

        r0 := @this;
        i0 := @parameter0;
        r3 = r0.get(i0);
        r1 = null;
        i1 = r0.contains(r3);
        if i1 == 0 goto label3;

        i2 = i0 + 1;
        i3 = r0.size();
        if i2 >= i3 goto label0;

        i4 = i0 + 1;
        r4 = r0.get(i4);
        r2 = (ca.mcgill.sable.soot.jimple.Stmt) r4;
        goto label2;

     label0:
        i5 = r0.size();
        if i5 < 2 goto label1;

        i6 = i0 - 1;
        r5 = r0.get(i6);
        r2 = (ca.mcgill.sable.soot.jimple.Stmt) r5;
        goto label2;

     label1:
        r2 = null;

     label2:
        r1 = specialinvoke r0.remove(i0);
        r6 = r0.body;
        r7 = (ca.mcgill.sable.soot.jimple.Stmt) r3;
        r6.redirectJumps(r7, r2);
        r8 = r0.body;
        r9 = (ca.mcgill.sable.soot.jimple.Stmt) r3;
        r8.eliminateBackPointersTo(r9);

     label3:
        return r1;
    }

    public boolean removeAll(ca.mcgill.sable.util.Collection)
    {
        ca.mcgill.sable.soot.jimple.StmtList r0;
        ca.mcgill.sable.util.Collection r1;
        ca.mcgill.sable.util.UnsupportedOperationException r2;

        r0 := @this;
        r1 := @parameter0;
        r2 = new ca.mcgill.sable.util.UnsupportedOperationException;
        specialinvoke r2.<init>();
        throw r2;
    }

    public void testIntegrity(java.lang.String)
    {
        ca.mcgill.sable.soot.jimple.StmtList r0;
        java.lang.String r1, r13, r15, r19, r21, r32, r34, r47, r50, r54;
        java.lang.StringBuffer r2, r14, r18, r20, r31, r33, r44, r46, r49, r51, r52, r53;
        ca.mcgill.sable.util.Iterator r3, r7, r22, r26, r35, r39;
        java.lang.Object r4, r8, r23, r27, r36, r40;
        ca.mcgill.sable.soot.jimple.Stmt r5, r11, r24, r37;
        ca.mcgill.sable.util.List r6, r16, r25, r38;
        ca.mcgill.sable.soot.jimple.StmtBox r9, r28, r41;
        ca.mcgill.sable.soot.jimple.Unit r10, r29, r42, r45;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        java.lang.RuntimeException r12, r17, r30, r48;
        java.io.PrintStream r43;

        r0 := @this;
        r1 := @parameter0;
        r3 = r0.iterator();
        goto label4;

     label0:
        r4 = r3.next();
        r5 = (ca.mcgill.sable.soot.jimple.Stmt) r4;
        r6 = r5.getUnitBoxes();
        r7 = r6.iterator();
        goto label3;

     label1:
        r8 = r7.next();
        r9 = (ca.mcgill.sable.soot.jimple.StmtBox) r8;
        r10 = r9.getUnit();
        r11 = (ca.mcgill.sable.soot.jimple.Stmt) r10;
        i0 = r0.contains(r11);
        if i0 != 0 goto label2;

        r12 = new java.lang.RuntimeException;
        r2 = new java.lang.StringBuffer;
        r13 = java.lang.String.valueOf(r1);
        specialinvoke r2.<init>(r13);
        r14 = r2.append("Statement no longer contained");
        r15 = r14.toString();
        specialinvoke r12.<init>(r15);
        throw r12;

     label2:
        r16 = r11.getBoxesPointingToThis();
        i1 = r16.contains(r9);
        if i1 != 0 goto label3;

        r17 = new java.lang.RuntimeException;
        r18 = new java.lang.StringBuffer;
        r19 = java.lang.String.valueOf(r1);
        specialinvoke r18.<init>(r19);
        r20 = r18.append("back pointer not set");
        r21 = r20.toString();
        specialinvoke r17.<init>(r21);
        throw r17;

     label3:
        i2 = r7.hasNext();
        if i2 != 0 goto label1;

     label4:
        i3 = r3.hasNext();
        if i3 != 0 goto label0;

        r22 = r0.iterator();
        goto label8;

     label5:
        r23 = r22.next();
        r24 = (ca.mcgill.sable.soot.jimple.Stmt) r23;
        r25 = r24.getBoxesPointingToThis();
        r26 = r25.iterator();
        goto label7;

     label6:
        r27 = r26.next();
        r28 = (ca.mcgill.sable.soot.jimple.StmtBox) r27;
        r29 = r28.getUnit();
        if r29 == r24 goto label7;

        r30 = new java.lang.RuntimeException;
        r31 = new java.lang.StringBuffer;
        r32 = java.lang.String.valueOf(r1);
        specialinvoke r31.<init>(r32);
        r33 = r31.append("back pointer still set");
        r34 = r33.toString();
        specialinvoke r30.<init>(r34);
        throw r30;

     label7:
        i4 = r26.hasNext();
        if i4 != 0 goto label6;

     label8:
        i5 = r22.hasNext();
        if i5 != 0 goto label5;

        r35 = r0.iterator();
        goto label12;

     label9:
        r36 = r35.next();
        r37 = (ca.mcgill.sable.soot.jimple.Stmt) r36;
        r38 = r37.getUnitBoxes();
        r39 = r38.iterator();
        goto label11;

     label10:
        r40 = r39.next();
        r41 = (ca.mcgill.sable.soot.jimple.StmtBox) r40;
        r42 = r41.getUnit();
        i6 = r0.indexOf(r42);
        if i6 != -1 goto label11;

        r43 = java.lang.System.out;
        r44 = new java.lang.StringBuffer;
        specialinvoke r44.<init>("looking for: ");
        r45 = r41.getUnit();
        r46 = r44.append(r45);
        r47 = r46.toString();
        r43.println(r47);
        r48 = new java.lang.RuntimeException;
        r49 = new java.lang.StringBuffer;
        r50 = java.lang.String.valueOf(r1);
        specialinvoke r49.<init>(r50);
        r51 = r49.append("[failed integrity test for: ");
        r52 = r51.append(r37);
        r53 = r52.append("]");
        r54 = r53.toString();
        specialinvoke r48.<init>(r54);
        throw r48;

     label11:
        i7 = r39.hasNext();
        if i7 != 0 goto label10;

     label12:
        i8 = r35.hasNext();
        if i8 != 0 goto label9;

        return;
    }
}
